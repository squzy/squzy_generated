// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: proto/v1/squzy_notification_server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationMethodType int32

const (
	NotificationMethodType_NOTIFICATION_METHOD_UNSPECIFIED NotificationMethodType = 0
	NotificationMethodType_NOTIFICATION_METHOD_WEBHOOK     NotificationMethodType = 1
	NotificationMethodType_NOTIFICATION_METHOD_SLACK       NotificationMethodType = 2
)

// Enum value maps for NotificationMethodType.
var (
	NotificationMethodType_name = map[int32]string{
		0: "NOTIFICATION_METHOD_UNSPECIFIED",
		1: "NOTIFICATION_METHOD_WEBHOOK",
		2: "NOTIFICATION_METHOD_SLACK",
	}
	NotificationMethodType_value = map[string]int32{
		"NOTIFICATION_METHOD_UNSPECIFIED": 0,
		"NOTIFICATION_METHOD_WEBHOOK":     1,
		"NOTIFICATION_METHOD_SLACK":       2,
	}
)

func (x NotificationMethodType) Enum() *NotificationMethodType {
	p := new(NotificationMethodType)
	*p = x
	return p
}

func (x NotificationMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_squzy_notification_server_proto_enumTypes[0].Descriptor()
}

func (NotificationMethodType) Type() protoreflect.EnumType {
	return &file_proto_v1_squzy_notification_server_proto_enumTypes[0]
}

func (x NotificationMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationMethodType.Descriptor instead.
func (NotificationMethodType) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{0}
}

type NotificationMethodStatus int32

const (
	NotificationMethodStatus_NOTIFICATION_STATUS_UNSPECIFIED NotificationMethodStatus = 0
	NotificationMethodStatus_NOTIFICATION_STATUS_ACTIVE      NotificationMethodStatus = 1
	NotificationMethodStatus_NOTIFICATION_STATUS_INACTIVE    NotificationMethodStatus = 2
	NotificationMethodStatus_NOTIFICATION_STATUS_REMOVED     NotificationMethodStatus = 3
)

// Enum value maps for NotificationMethodStatus.
var (
	NotificationMethodStatus_name = map[int32]string{
		0: "NOTIFICATION_STATUS_UNSPECIFIED",
		1: "NOTIFICATION_STATUS_ACTIVE",
		2: "NOTIFICATION_STATUS_INACTIVE",
		3: "NOTIFICATION_STATUS_REMOVED",
	}
	NotificationMethodStatus_value = map[string]int32{
		"NOTIFICATION_STATUS_UNSPECIFIED": 0,
		"NOTIFICATION_STATUS_ACTIVE":      1,
		"NOTIFICATION_STATUS_INACTIVE":    2,
		"NOTIFICATION_STATUS_REMOVED":     3,
	}
)

func (x NotificationMethodStatus) Enum() *NotificationMethodStatus {
	p := new(NotificationMethodStatus)
	*p = x
	return p
}

func (x NotificationMethodStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationMethodStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_squzy_notification_server_proto_enumTypes[1].Descriptor()
}

func (NotificationMethodStatus) Type() protoreflect.EnumType {
	return &file_proto_v1_squzy_notification_server_proto_enumTypes[1]
}

func (x NotificationMethodStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationMethodStatus.Descriptor instead.
func (NotificationMethodStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{1}
}

type NotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncidentId string             `protobuf:"bytes,1,opt,name=incident_id,json=incidentId,proto3" json:"incident_id,omitempty"`
	OwnerType  ComponentOwnerType `protobuf:"varint,2,opt,name=owner_type,json=ownerType,proto3,enum=squzy.v1.shared.ComponentOwnerType" json:"owner_type,omitempty"`
	// It is rule id
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// Added for user purpose
	RuleName string `protobuf:"bytes,4,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
}

func (x *NotifyRequest) Reset() {
	*x = NotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyRequest) ProtoMessage() {}

func (x *NotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyRequest.ProtoReflect.Descriptor instead.
func (*NotifyRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{0}
}

func (x *NotifyRequest) GetIncidentId() string {
	if x != nil {
		return x.IncidentId
	}
	return ""
}

func (x *NotifyRequest) GetOwnerType() ComponentOwnerType {
	if x != nil {
		return x.OwnerType
	}
	return ComponentOwnerType_COMPONENT_OWNER_TYPE_UNSPECIFIED
}

func (x *NotifyRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *NotifyRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

type WebHookMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WebHookMethod) Reset() {
	*x = WebHookMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebHookMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebHookMethod) ProtoMessage() {}

func (x *WebHookMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebHookMethod.ProtoReflect.Descriptor instead.
func (*WebHookMethod) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{1}
}

func (x *WebHookMethod) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SlackMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SlackMethod) Reset() {
	*x = SlackMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackMethod) ProtoMessage() {}

func (x *SlackMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackMethod.ProtoReflect.Descriptor instead.
func (*SlackMethod) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{2}
}

func (x *SlackMethod) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type NotificationMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerType            ComponentOwnerType `protobuf:"varint,1,opt,name=owner_type,json=ownerType,proto3,enum=squzy.v1.shared.ComponentOwnerType" json:"owner_type,omitempty"`
	OwnerId              string             `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	NotificationMethodId string             `protobuf:"bytes,3,opt,name=notification_method_id,json=notificationMethodId,proto3" json:"notification_method_id,omitempty"`
}

func (x *NotificationMethodRequest) Reset() {
	*x = NotificationMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMethodRequest) ProtoMessage() {}

func (x *NotificationMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMethodRequest.ProtoReflect.Descriptor instead.
func (*NotificationMethodRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{3}
}

func (x *NotificationMethodRequest) GetOwnerType() ComponentOwnerType {
	if x != nil {
		return x.OwnerType
	}
	return ComponentOwnerType_COMPONENT_OWNER_TYPE_UNSPECIFIED
}

func (x *NotificationMethodRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *NotificationMethodRequest) GetNotificationMethodId() string {
	if x != nil {
		return x.NotificationMethodId
	}
	return ""
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerType ComponentOwnerType `protobuf:"varint,1,opt,name=owner_type,json=ownerType,proto3,enum=squzy.v1.shared.ComponentOwnerType" json:"owner_type,omitempty"`
	OwnerId   string             `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{4}
}

func (x *GetListRequest) GetOwnerType() ComponentOwnerType {
	if x != nil {
		return x.OwnerType
	}
	return ComponentOwnerType_COMPONENT_OWNER_TYPE_UNSPECIFIED
}

func (x *GetListRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type NotificationMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status NotificationMethodStatus `protobuf:"varint,3,opt,name=status,proto3,enum=squzy.v1.notification.NotificationMethodStatus" json:"status,omitempty"`
	Type   NotificationMethodType   `protobuf:"varint,4,opt,name=type,proto3,enum=squzy.v1.notification.NotificationMethodType" json:"type,omitempty"`
	// Types that are assignable to Method:
	//	*NotificationMethod_Slack
	//	*NotificationMethod_Webhook
	Method isNotificationMethod_Method `protobuf_oneof:"method"`
}

func (x *NotificationMethod) Reset() {
	*x = NotificationMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMethod) ProtoMessage() {}

func (x *NotificationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMethod.ProtoReflect.Descriptor instead.
func (*NotificationMethod) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{5}
}

func (x *NotificationMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotificationMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationMethod) GetStatus() NotificationMethodStatus {
	if x != nil {
		return x.Status
	}
	return NotificationMethodStatus_NOTIFICATION_STATUS_UNSPECIFIED
}

func (x *NotificationMethod) GetType() NotificationMethodType {
	if x != nil {
		return x.Type
	}
	return NotificationMethodType_NOTIFICATION_METHOD_UNSPECIFIED
}

func (m *NotificationMethod) GetMethod() isNotificationMethod_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *NotificationMethod) GetSlack() *SlackMethod {
	if x, ok := x.GetMethod().(*NotificationMethod_Slack); ok {
		return x.Slack
	}
	return nil
}

func (x *NotificationMethod) GetWebhook() *WebHookMethod {
	if x, ok := x.GetMethod().(*NotificationMethod_Webhook); ok {
		return x.Webhook
	}
	return nil
}

type isNotificationMethod_Method interface {
	isNotificationMethod_Method()
}

type NotificationMethod_Slack struct {
	Slack *SlackMethod `protobuf:"bytes,5,opt,name=slack,proto3,oneof"`
}

type NotificationMethod_Webhook struct {
	Webhook *WebHookMethod `protobuf:"bytes,6,opt,name=webhook,proto3,oneof"`
}

func (*NotificationMethod_Slack) isNotificationMethod_Method() {}

func (*NotificationMethod_Webhook) isNotificationMethod_Method() {}

type NotificationMethodIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NotificationMethodIdRequest) Reset() {
	*x = NotificationMethodIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationMethodIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMethodIdRequest) ProtoMessage() {}

func (x *NotificationMethodIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMethodIdRequest.ProtoReflect.Descriptor instead.
func (*NotificationMethodIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{6}
}

func (x *NotificationMethodIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateNotificationMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type NotificationMethodType `protobuf:"varint,1,opt,name=type,proto3,enum=squzy.v1.notification.NotificationMethodType" json:"type,omitempty"`
	Name string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Method:
	//	*CreateNotificationMethodRequest_Slack
	//	*CreateNotificationMethodRequest_Webhook
	Method isCreateNotificationMethodRequest_Method `protobuf_oneof:"method"`
}

func (x *CreateNotificationMethodRequest) Reset() {
	*x = CreateNotificationMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationMethodRequest) ProtoMessage() {}

func (x *CreateNotificationMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationMethodRequest.ProtoReflect.Descriptor instead.
func (*CreateNotificationMethodRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{7}
}

func (x *CreateNotificationMethodRequest) GetType() NotificationMethodType {
	if x != nil {
		return x.Type
	}
	return NotificationMethodType_NOTIFICATION_METHOD_UNSPECIFIED
}

func (x *CreateNotificationMethodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *CreateNotificationMethodRequest) GetMethod() isCreateNotificationMethodRequest_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *CreateNotificationMethodRequest) GetSlack() *SlackMethod {
	if x, ok := x.GetMethod().(*CreateNotificationMethodRequest_Slack); ok {
		return x.Slack
	}
	return nil
}

func (x *CreateNotificationMethodRequest) GetWebhook() *WebHookMethod {
	if x, ok := x.GetMethod().(*CreateNotificationMethodRequest_Webhook); ok {
		return x.Webhook
	}
	return nil
}

type isCreateNotificationMethodRequest_Method interface {
	isCreateNotificationMethodRequest_Method()
}

type CreateNotificationMethodRequest_Slack struct {
	Slack *SlackMethod `protobuf:"bytes,3,opt,name=slack,proto3,oneof"`
}

type CreateNotificationMethodRequest_Webhook struct {
	Webhook *WebHookMethod `protobuf:"bytes,4,opt,name=webhook,proto3,oneof"`
}

func (*CreateNotificationMethodRequest_Slack) isCreateNotificationMethodRequest_Method() {}

func (*CreateNotificationMethodRequest_Webhook) isCreateNotificationMethodRequest_Method() {}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []*NotificationMethod `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_notification_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_notification_server_proto_rawDescGZIP(), []int{8}
}

func (x *GetListResponse) GetMethods() []*NotificationMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

var File_proto_v1_squzy_notification_server_proto protoreflect.FileDescriptor

var file_proto_v1_squzy_notification_server_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x7a, 0x79,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x71, 0x75, 0x7a,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73,
	0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x1f, 0x0a, 0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x71, 0x75,
	0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x02, 0x0a,
	0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x40, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73,
	0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63,
	0x6b, 0x12, 0x40, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x56, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2a, 0x7d, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x48,
	0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x4c, 0x41,
	0x43, 0x4b, 0x10, 0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x32, 0x8a, 0x08, 0x0a, 0x13, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x7d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x36, 0x2e,
	0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x73, 0x71,
	0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x58, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x73,
	0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x32, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x69, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e,
	0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x6b, 0x0a, 0x0a,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x71, 0x75,
	0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x62, 0x0a, 0x03, 0x41, 0x64, 0x64,
	0x12, 0x30, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x65, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x30, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x71, 0x75, 0x7a,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x58, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2f, 0x73, 0x71, 0x75, 0x7a, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_v1_squzy_notification_server_proto_rawDescOnce sync.Once
	file_proto_v1_squzy_notification_server_proto_rawDescData = file_proto_v1_squzy_notification_server_proto_rawDesc
)

func file_proto_v1_squzy_notification_server_proto_rawDescGZIP() []byte {
	file_proto_v1_squzy_notification_server_proto_rawDescOnce.Do(func() {
		file_proto_v1_squzy_notification_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_v1_squzy_notification_server_proto_rawDescData)
	})
	return file_proto_v1_squzy_notification_server_proto_rawDescData
}

var file_proto_v1_squzy_notification_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_v1_squzy_notification_server_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_v1_squzy_notification_server_proto_goTypes = []interface{}{
	(NotificationMethodType)(0),             // 0: squzy.v1.notification.NotificationMethodType
	(NotificationMethodStatus)(0),           // 1: squzy.v1.notification.NotificationMethodStatus
	(*NotifyRequest)(nil),                   // 2: squzy.v1.notification.NotifyRequest
	(*WebHookMethod)(nil),                   // 3: squzy.v1.notification.WebHookMethod
	(*SlackMethod)(nil),                     // 4: squzy.v1.notification.SlackMethod
	(*NotificationMethodRequest)(nil),       // 5: squzy.v1.notification.NotificationMethodRequest
	(*GetListRequest)(nil),                  // 6: squzy.v1.notification.GetListRequest
	(*NotificationMethod)(nil),              // 7: squzy.v1.notification.NotificationMethod
	(*NotificationMethodIdRequest)(nil),     // 8: squzy.v1.notification.NotificationMethodIdRequest
	(*CreateNotificationMethodRequest)(nil), // 9: squzy.v1.notification.CreateNotificationMethodRequest
	(*GetListResponse)(nil),                 // 10: squzy.v1.notification.GetListResponse
	(ComponentOwnerType)(0),                 // 11: squzy.v1.shared.ComponentOwnerType
	(*emptypb.Empty)(nil),                   // 12: google.protobuf.Empty
}
var file_proto_v1_squzy_notification_server_proto_depIdxs = []int32{
	11, // 0: squzy.v1.notification.NotifyRequest.owner_type:type_name -> squzy.v1.shared.ComponentOwnerType
	11, // 1: squzy.v1.notification.NotificationMethodRequest.owner_type:type_name -> squzy.v1.shared.ComponentOwnerType
	11, // 2: squzy.v1.notification.GetListRequest.owner_type:type_name -> squzy.v1.shared.ComponentOwnerType
	1,  // 3: squzy.v1.notification.NotificationMethod.status:type_name -> squzy.v1.notification.NotificationMethodStatus
	0,  // 4: squzy.v1.notification.NotificationMethod.type:type_name -> squzy.v1.notification.NotificationMethodType
	4,  // 5: squzy.v1.notification.NotificationMethod.slack:type_name -> squzy.v1.notification.SlackMethod
	3,  // 6: squzy.v1.notification.NotificationMethod.webhook:type_name -> squzy.v1.notification.WebHookMethod
	0,  // 7: squzy.v1.notification.CreateNotificationMethodRequest.type:type_name -> squzy.v1.notification.NotificationMethodType
	4,  // 8: squzy.v1.notification.CreateNotificationMethodRequest.slack:type_name -> squzy.v1.notification.SlackMethod
	3,  // 9: squzy.v1.notification.CreateNotificationMethodRequest.webhook:type_name -> squzy.v1.notification.WebHookMethod
	7,  // 10: squzy.v1.notification.GetListResponse.methods:type_name -> squzy.v1.notification.NotificationMethod
	9,  // 11: squzy.v1.notification.NotificationManager.CreateNotificationMethod:input_type -> squzy.v1.notification.CreateNotificationMethodRequest
	8,  // 12: squzy.v1.notification.NotificationManager.GetById:input_type -> squzy.v1.notification.NotificationMethodIdRequest
	12, // 13: squzy.v1.notification.NotificationManager.GetNotificationMethods:input_type -> google.protobuf.Empty
	8,  // 14: squzy.v1.notification.NotificationManager.DeleteById:input_type -> squzy.v1.notification.NotificationMethodIdRequest
	8,  // 15: squzy.v1.notification.NotificationManager.Activate:input_type -> squzy.v1.notification.NotificationMethodIdRequest
	8,  // 16: squzy.v1.notification.NotificationManager.Deactivate:input_type -> squzy.v1.notification.NotificationMethodIdRequest
	5,  // 17: squzy.v1.notification.NotificationManager.Add:input_type -> squzy.v1.notification.NotificationMethodRequest
	5,  // 18: squzy.v1.notification.NotificationManager.Remove:input_type -> squzy.v1.notification.NotificationMethodRequest
	6,  // 19: squzy.v1.notification.NotificationManager.GetList:input_type -> squzy.v1.notification.GetListRequest
	2,  // 20: squzy.v1.notification.NotificationManager.Notify:input_type -> squzy.v1.notification.NotifyRequest
	7,  // 21: squzy.v1.notification.NotificationManager.CreateNotificationMethod:output_type -> squzy.v1.notification.NotificationMethod
	7,  // 22: squzy.v1.notification.NotificationManager.GetById:output_type -> squzy.v1.notification.NotificationMethod
	10, // 23: squzy.v1.notification.NotificationManager.GetNotificationMethods:output_type -> squzy.v1.notification.GetListResponse
	7,  // 24: squzy.v1.notification.NotificationManager.DeleteById:output_type -> squzy.v1.notification.NotificationMethod
	7,  // 25: squzy.v1.notification.NotificationManager.Activate:output_type -> squzy.v1.notification.NotificationMethod
	7,  // 26: squzy.v1.notification.NotificationManager.Deactivate:output_type -> squzy.v1.notification.NotificationMethod
	7,  // 27: squzy.v1.notification.NotificationManager.Add:output_type -> squzy.v1.notification.NotificationMethod
	7,  // 28: squzy.v1.notification.NotificationManager.Remove:output_type -> squzy.v1.notification.NotificationMethod
	10, // 29: squzy.v1.notification.NotificationManager.GetList:output_type -> squzy.v1.notification.GetListResponse
	12, // 30: squzy.v1.notification.NotificationManager.Notify:output_type -> google.protobuf.Empty
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_v1_squzy_notification_server_proto_init() }
func file_proto_v1_squzy_notification_server_proto_init() {
	if File_proto_v1_squzy_notification_server_proto != nil {
		return
	}
	file_proto_v1_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_v1_squzy_notification_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebHookMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMethodIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_notification_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_v1_squzy_notification_server_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NotificationMethod_Slack)(nil),
		(*NotificationMethod_Webhook)(nil),
	}
	file_proto_v1_squzy_notification_server_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CreateNotificationMethodRequest_Slack)(nil),
		(*CreateNotificationMethodRequest_Webhook)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_v1_squzy_notification_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_v1_squzy_notification_server_proto_goTypes,
		DependencyIndexes: file_proto_v1_squzy_notification_server_proto_depIdxs,
		EnumInfos:         file_proto_v1_squzy_notification_server_proto_enumTypes,
		MessageInfos:      file_proto_v1_squzy_notification_server_proto_msgTypes,
	}.Build()
	File_proto_v1_squzy_notification_server_proto = out.File
	file_proto_v1_squzy_notification_server_proto_rawDesc = nil
	file_proto_v1_squzy_notification_server_proto_goTypes = nil
	file_proto_v1_squzy_notification_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificationManagerClient is the client API for NotificationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationManagerClient interface {
	// protolint:disable:next MAX_LINE_LENGTH
	CreateNotificationMethod(ctx context.Context, in *CreateNotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	GetById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	GetNotificationMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error)
	DeleteById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Activate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Deactivate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Add(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Remove(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationManagerClient(cc grpc.ClientConnInterface) NotificationManagerClient {
	return &notificationManagerClient{cc}
}

func (c *notificationManagerClient) CreateNotificationMethod(ctx context.Context, in *CreateNotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/CreateNotificationMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetNotificationMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/GetNotificationMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) DeleteById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Activate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Deactivate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Add(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Remove(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationManagerServer is the server API for NotificationManager service.
type NotificationManagerServer interface {
	// protolint:disable:next MAX_LINE_LENGTH
	CreateNotificationMethod(context.Context, *CreateNotificationMethodRequest) (*NotificationMethod, error)
	GetById(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	GetNotificationMethods(context.Context, *emptypb.Empty) (*GetListResponse, error)
	DeleteById(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	Activate(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	Deactivate(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	Add(context.Context, *NotificationMethodRequest) (*NotificationMethod, error)
	Remove(context.Context, *NotificationMethodRequest) (*NotificationMethod, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Notify(context.Context, *NotifyRequest) (*emptypb.Empty, error)
}

// UnimplementedNotificationManagerServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationManagerServer struct {
}

func (*UnimplementedNotificationManagerServer) CreateNotificationMethod(context.Context, *CreateNotificationMethodRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationMethod not implemented")
}
func (*UnimplementedNotificationManagerServer) GetById(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedNotificationManagerServer) GetNotificationMethods(context.Context, *emptypb.Empty) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationMethods not implemented")
}
func (*UnimplementedNotificationManagerServer) DeleteById(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (*UnimplementedNotificationManagerServer) Activate(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedNotificationManagerServer) Deactivate(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (*UnimplementedNotificationManagerServer) Add(context.Context, *NotificationMethodRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedNotificationManagerServer) Remove(context.Context, *NotificationMethodRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedNotificationManagerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedNotificationManagerServer) Notify(context.Context, *NotifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

func RegisterNotificationManagerServer(s *grpc.Server, srv NotificationManagerServer) {
	s.RegisterService(&_NotificationManager_serviceDesc, srv)
}

func _NotificationManager_CreateNotificationMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).CreateNotificationMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/CreateNotificationMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).CreateNotificationMethod(ctx, req.(*CreateNotificationMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetById(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetNotificationMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetNotificationMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/GetNotificationMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetNotificationMethods(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).DeleteById(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Activate(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Deactivate(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Add(ctx, req.(*NotificationMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Remove(ctx, req.(*NotificationMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.v1.notification.NotificationManager",
	HandlerType: (*NotificationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotificationMethod",
			Handler:    _NotificationManager_CreateNotificationMethod_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _NotificationManager_GetById_Handler,
		},
		{
			MethodName: "GetNotificationMethods",
			Handler:    _NotificationManager_GetNotificationMethods_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _NotificationManager_DeleteById_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _NotificationManager_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _NotificationManager_Deactivate_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _NotificationManager_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _NotificationManager_Remove_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _NotificationManager_GetList_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _NotificationManager_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/squzy_notification_server.proto",
}
