// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/v1/squzy_application_monitoring.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationMonitoringClient is the client API for ApplicationMonitoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationMonitoringClient interface {
	// protolint:disable:next MAX_LINE_LENGTH
	InitializeApplication(ctx context.Context, in *ApplicationInfo, opts ...grpc.CallOption) (*InitializeApplicationResponse, error)
	SaveTransaction(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetApplicationList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApplicationListResponse, error)
	// protolint:disable:next MAX_LINE_LENGTH
	ArchiveApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error)
	EnableApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error)
	DisableApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetApplicationListByAgentId(ctx context.Context, in *AgentIdRequest, opts ...grpc.CallOption) (*GetApplicationListResponse, error)
}

type applicationMonitoringClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationMonitoringClient(cc grpc.ClientConnInterface) ApplicationMonitoringClient {
	return &applicationMonitoringClient{cc}
}

func (c *applicationMonitoringClient) InitializeApplication(ctx context.Context, in *ApplicationInfo, opts ...grpc.CallOption) (*InitializeApplicationResponse, error) {
	out := new(InitializeApplicationResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/InitializeApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) SaveTransaction(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/SaveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) GetApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/GetApplicationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) GetApplicationList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApplicationListResponse, error) {
	out := new(GetApplicationListResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/GetApplicationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) ArchiveApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/ArchiveApplicationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) EnableApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/EnableApplicationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) DisableApplicationById(ctx context.Context, in *ApplicationByIdReuqest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/DisableApplicationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMonitoringClient) GetApplicationListByAgentId(ctx context.Context, in *AgentIdRequest, opts ...grpc.CallOption) (*GetApplicationListResponse, error) {
	out := new(GetApplicationListResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.monitoring.ApplicationMonitoring/GetApplicationListByAgentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationMonitoringServer is the server API for ApplicationMonitoring service.
// All implementations must embed UnimplementedApplicationMonitoringServer
// for forward compatibility
type ApplicationMonitoringServer interface {
	// protolint:disable:next MAX_LINE_LENGTH
	InitializeApplication(context.Context, *ApplicationInfo) (*InitializeApplicationResponse, error)
	SaveTransaction(context.Context, *TransactionInfo) (*emptypb.Empty, error)
	GetApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetApplicationList(context.Context, *emptypb.Empty) (*GetApplicationListResponse, error)
	// protolint:disable:next MAX_LINE_LENGTH
	ArchiveApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error)
	EnableApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error)
	DisableApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetApplicationListByAgentId(context.Context, *AgentIdRequest) (*GetApplicationListResponse, error)
	mustEmbedUnimplementedApplicationMonitoringServer()
}

// UnimplementedApplicationMonitoringServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationMonitoringServer struct {
}

func (UnimplementedApplicationMonitoringServer) InitializeApplication(context.Context, *ApplicationInfo) (*InitializeApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeApplication not implemented")
}
func (UnimplementedApplicationMonitoringServer) SaveTransaction(context.Context, *TransactionInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTransaction not implemented")
}
func (UnimplementedApplicationMonitoringServer) GetApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationById not implemented")
}
func (UnimplementedApplicationMonitoringServer) GetApplicationList(context.Context, *emptypb.Empty) (*GetApplicationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationList not implemented")
}
func (UnimplementedApplicationMonitoringServer) ArchiveApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveApplicationById not implemented")
}
func (UnimplementedApplicationMonitoringServer) EnableApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableApplicationById not implemented")
}
func (UnimplementedApplicationMonitoringServer) DisableApplicationById(context.Context, *ApplicationByIdReuqest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableApplicationById not implemented")
}
func (UnimplementedApplicationMonitoringServer) GetApplicationListByAgentId(context.Context, *AgentIdRequest) (*GetApplicationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationListByAgentId not implemented")
}
func (UnimplementedApplicationMonitoringServer) mustEmbedUnimplementedApplicationMonitoringServer() {}

// UnsafeApplicationMonitoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationMonitoringServer will
// result in compilation errors.
type UnsafeApplicationMonitoringServer interface {
	mustEmbedUnimplementedApplicationMonitoringServer()
}

func RegisterApplicationMonitoringServer(s grpc.ServiceRegistrar, srv ApplicationMonitoringServer) {
	s.RegisterService(&ApplicationMonitoring_ServiceDesc, srv)
}

func _ApplicationMonitoring_InitializeApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).InitializeApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/InitializeApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).InitializeApplication(ctx, req.(*ApplicationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_SaveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).SaveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/SaveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).SaveTransaction(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_GetApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationByIdReuqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).GetApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/GetApplicationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).GetApplicationById(ctx, req.(*ApplicationByIdReuqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_GetApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).GetApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/GetApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).GetApplicationList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_ArchiveApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationByIdReuqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).ArchiveApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/ArchiveApplicationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).ArchiveApplicationById(ctx, req.(*ApplicationByIdReuqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_EnableApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationByIdReuqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).EnableApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/EnableApplicationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).EnableApplicationById(ctx, req.(*ApplicationByIdReuqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_DisableApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationByIdReuqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).DisableApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/DisableApplicationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).DisableApplicationById(ctx, req.(*ApplicationByIdReuqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMonitoring_GetApplicationListByAgentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMonitoringServer).GetApplicationListByAgentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.monitoring.ApplicationMonitoring/GetApplicationListByAgentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMonitoringServer).GetApplicationListByAgentId(ctx, req.(*AgentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationMonitoring_ServiceDesc is the grpc.ServiceDesc for ApplicationMonitoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationMonitoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.v1.monitoring.ApplicationMonitoring",
	HandlerType: (*ApplicationMonitoringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeApplication",
			Handler:    _ApplicationMonitoring_InitializeApplication_Handler,
		},
		{
			MethodName: "SaveTransaction",
			Handler:    _ApplicationMonitoring_SaveTransaction_Handler,
		},
		{
			MethodName: "GetApplicationById",
			Handler:    _ApplicationMonitoring_GetApplicationById_Handler,
		},
		{
			MethodName: "GetApplicationList",
			Handler:    _ApplicationMonitoring_GetApplicationList_Handler,
		},
		{
			MethodName: "ArchiveApplicationById",
			Handler:    _ApplicationMonitoring_ArchiveApplicationById_Handler,
		},
		{
			MethodName: "EnableApplicationById",
			Handler:    _ApplicationMonitoring_EnableApplicationById_Handler,
		},
		{
			MethodName: "DisableApplicationById",
			Handler:    _ApplicationMonitoring_DisableApplicationById_Handler,
		},
		{
			MethodName: "GetApplicationListByAgentId",
			Handler:    _ApplicationMonitoring_GetApplicationListByAgentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/squzy_application_monitoring.proto",
}
