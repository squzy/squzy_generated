// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/v1/squzy_monitoring.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedulerCode int32

const (
	SchedulerCode_SCHEDULER_CODE_UNSPECIFIED SchedulerCode = 0
	SchedulerCode_OK                         SchedulerCode = 1
	SchedulerCode_ERROR                      SchedulerCode = 2
)

// Enum value maps for SchedulerCode.
var (
	SchedulerCode_name = map[int32]string{
		0: "SCHEDULER_CODE_UNSPECIFIED",
		1: "OK",
		2: "ERROR",
	}
	SchedulerCode_value = map[string]int32{
		"SCHEDULER_CODE_UNSPECIFIED": 0,
		"OK":                         1,
		"ERROR":                      2,
	}
)

func (x SchedulerCode) Enum() *SchedulerCode {
	p := new(SchedulerCode)
	*p = x
	return p
}

func (x SchedulerCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_squzy_monitoring_proto_enumTypes[0].Descriptor()
}

func (SchedulerCode) Type() protoreflect.EnumType {
	return &file_proto_v1_squzy_monitoring_proto_enumTypes[0]
}

func (x SchedulerCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerCode.Descriptor instead.
func (SchedulerCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{0}
}

type SchedulerStatus int32

const (
	// Initial status
	SchedulerStatus_SCHEDULER_STATUS_UNSPECIFIED SchedulerStatus = 0
	SchedulerStatus_RUNNED                       SchedulerStatus = 1
	SchedulerStatus_STOPPED                      SchedulerStatus = 2
	SchedulerStatus_REMOVED                      SchedulerStatus = 3
)

// Enum value maps for SchedulerStatus.
var (
	SchedulerStatus_name = map[int32]string{
		0: "SCHEDULER_STATUS_UNSPECIFIED",
		1: "RUNNED",
		2: "STOPPED",
		3: "REMOVED",
	}
	SchedulerStatus_value = map[string]int32{
		"SCHEDULER_STATUS_UNSPECIFIED": 0,
		"RUNNED":                       1,
		"STOPPED":                      2,
		"REMOVED":                      3,
	}
)

func (x SchedulerStatus) Enum() *SchedulerStatus {
	p := new(SchedulerStatus)
	*p = x
	return p
}

func (x SchedulerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_squzy_monitoring_proto_enumTypes[1].Descriptor()
}

func (SchedulerStatus) Type() protoreflect.EnumType {
	return &file_proto_v1_squzy_monitoring_proto_enumTypes[1]
}

func (x SchedulerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerStatus.Descriptor instead.
func (SchedulerStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{1}
}

type SchedulerType int32

const (
	// Initial status
	SchedulerType_SCHEDULER_TYPE_UNSPECIFIED SchedulerType = 0
	SchedulerType_TCP                        SchedulerType = 1
	SchedulerType_GRPC                       SchedulerType = 2
	SchedulerType_HTTP                       SchedulerType = 3
	SchedulerType_SITE_MAP                   SchedulerType = 4
	SchedulerType_HTTP_JSON_VALUE            SchedulerType = 5
	SchedulerType_SSL_EXPIRATION             SchedulerType = 6
	SchedulerType_MONGO                      SchedulerType = 7
	SchedulerType_POSTGRES                   SchedulerType = 8
	SchedulerType_CASSANDRA                  SchedulerType = 9
	SchedulerType_MYSQL                      SchedulerType = 10
)

// Enum value maps for SchedulerType.
var (
	SchedulerType_name = map[int32]string{
		0:  "SCHEDULER_TYPE_UNSPECIFIED",
		1:  "TCP",
		2:  "GRPC",
		3:  "HTTP",
		4:  "SITE_MAP",
		5:  "HTTP_JSON_VALUE",
		6:  "SSL_EXPIRATION",
		7:  "MONGO",
		8:  "POSTGRES",
		9:  "CASSANDRA",
		10: "MYSQL",
	}
	SchedulerType_value = map[string]int32{
		"SCHEDULER_TYPE_UNSPECIFIED": 0,
		"TCP":                        1,
		"GRPC":                       2,
		"HTTP":                       3,
		"SITE_MAP":                   4,
		"HTTP_JSON_VALUE":            5,
		"SSL_EXPIRATION":             6,
		"MONGO":                      7,
		"POSTGRES":                   8,
		"CASSANDRA":                  9,
		"MYSQL":                      10,
	}
)

func (x SchedulerType) Enum() *SchedulerType {
	p := new(SchedulerType)
	*p = x
	return p
}

func (x SchedulerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_squzy_monitoring_proto_enumTypes[2].Descriptor()
}

func (SchedulerType) Type() protoreflect.EnumType {
	return &file_proto_v1_squzy_monitoring_proto_enumTypes[2]
}

func (x SchedulerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerType.Descriptor instead.
func (SchedulerType) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{2}
}

type HttpJsonValueConfig_JsonValueParseType int32

const (
	// Initial status
	HttpJsonValueConfig_JSON_PARSE_VALUE_UNSPECIFIED HttpJsonValueConfig_JsonValueParseType = 0
	HttpJsonValueConfig_STRING                       HttpJsonValueConfig_JsonValueParseType = 1
	HttpJsonValueConfig_BOOL                         HttpJsonValueConfig_JsonValueParseType = 2
	HttpJsonValueConfig_NUMBER                       HttpJsonValueConfig_JsonValueParseType = 3
	HttpJsonValueConfig_TIME                         HttpJsonValueConfig_JsonValueParseType = 4
	HttpJsonValueConfig_ANY                          HttpJsonValueConfig_JsonValueParseType = 5
	HttpJsonValueConfig_RAW                          HttpJsonValueConfig_JsonValueParseType = 6
)

// Enum value maps for HttpJsonValueConfig_JsonValueParseType.
var (
	HttpJsonValueConfig_JsonValueParseType_name = map[int32]string{
		0: "JSON_PARSE_VALUE_UNSPECIFIED",
		1: "STRING",
		2: "BOOL",
		3: "NUMBER",
		4: "TIME",
		5: "ANY",
		6: "RAW",
	}
	HttpJsonValueConfig_JsonValueParseType_value = map[string]int32{
		"JSON_PARSE_VALUE_UNSPECIFIED": 0,
		"STRING":                       1,
		"BOOL":                         2,
		"NUMBER":                       3,
		"TIME":                         4,
		"ANY":                          5,
		"RAW":                          6,
	}
)

func (x HttpJsonValueConfig_JsonValueParseType) Enum() *HttpJsonValueConfig_JsonValueParseType {
	p := new(HttpJsonValueConfig_JsonValueParseType)
	*p = x
	return p
}

func (x HttpJsonValueConfig_JsonValueParseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpJsonValueConfig_JsonValueParseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_squzy_monitoring_proto_enumTypes[3].Descriptor()
}

func (HttpJsonValueConfig_JsonValueParseType) Type() protoreflect.EnumType {
	return &file_proto_v1_squzy_monitoring_proto_enumTypes[3]
}

func (x HttpJsonValueConfig_JsonValueParseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpJsonValueConfig_JsonValueParseType.Descriptor instead.
func (HttpJsonValueConfig_JsonValueParseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{11, 0}
}

type SchedulerSnapshotWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *SchedulerSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Id       string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SchedulerSnapshotWithId) Reset() {
	*x = SchedulerSnapshotWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerSnapshotWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerSnapshotWithId) ProtoMessage() {}

func (x *SchedulerSnapshotWithId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerSnapshotWithId.ProtoReflect.Descriptor instead.
func (*SchedulerSnapshotWithId) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{0}
}

func (x *SchedulerSnapshotWithId) GetSnapshot() *SchedulerSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *SchedulerSnapshotWithId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SchedulerSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  SchedulerCode               `protobuf:"varint,2,opt,name=code,proto3,enum=squzy.v1.monitoring.SchedulerCode" json:"code,omitempty"`
	Type  SchedulerType               `protobuf:"varint,3,opt,name=type,proto3,enum=squzy.v1.monitoring.SchedulerType" json:"type,omitempty"`
	Error *SchedulerSnapshot_Error    `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Meta  *SchedulerSnapshot_MetaData `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *SchedulerSnapshot) Reset() {
	*x = SchedulerSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerSnapshot) ProtoMessage() {}

func (x *SchedulerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerSnapshot.ProtoReflect.Descriptor instead.
func (*SchedulerSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{1}
}

func (x *SchedulerSnapshot) GetCode() SchedulerCode {
	if x != nil {
		return x.Code
	}
	return SchedulerCode_SCHEDULER_CODE_UNSPECIFIED
}

func (x *SchedulerSnapshot) GetType() SchedulerType {
	if x != nil {
		return x.Type
	}
	return SchedulerType_SCHEDULER_TYPE_UNSPECIFIED
}

func (x *SchedulerSnapshot) GetError() *SchedulerSnapshot_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SchedulerSnapshot) GetMeta() *SchedulerSnapshot_MetaData {
	if x != nil {
		return x.Meta
	}
	return nil
}

type GetSchedulerByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSchedulerByIdRequest) Reset() {
	*x = GetSchedulerByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerByIdRequest) ProtoMessage() {}

func (x *GetSchedulerByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerByIdRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{2}
}

func (x *GetSchedulerByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type   SchedulerType   `protobuf:"varint,3,opt,name=type,proto3,enum=squzy.v1.monitoring.SchedulerType" json:"type,omitempty"`
	Status SchedulerStatus `protobuf:"varint,4,opt,name=status,proto3,enum=squzy.v1.monitoring.SchedulerStatus" json:"status,omitempty"`
	// How often we need execute check
	Interval int32 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	// Timeout for check request
	Timeout int32 `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Config of the scheduler;
	//
	// Types that are assignable to Config:
	//
	//	*Scheduler_Tcp
	//	*Scheduler_Sitemap
	//	*Scheduler_Grpc
	//	*Scheduler_Http
	//	*Scheduler_HttpValue
	//	*Scheduler_SslExpiration
	//	*Scheduler_Mongo
	//	*Scheduler_Postgres
	//	*Scheduler_Cassandra
	//	*Scheduler_Mysql
	Config isScheduler_Config `protobuf_oneof:"config"`
}

func (x *Scheduler) Reset() {
	*x = Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler) ProtoMessage() {}

func (x *Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler.ProtoReflect.Descriptor instead.
func (*Scheduler) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{3}
}

func (x *Scheduler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scheduler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scheduler) GetType() SchedulerType {
	if x != nil {
		return x.Type
	}
	return SchedulerType_SCHEDULER_TYPE_UNSPECIFIED
}

func (x *Scheduler) GetStatus() SchedulerStatus {
	if x != nil {
		return x.Status
	}
	return SchedulerStatus_SCHEDULER_STATUS_UNSPECIFIED
}

func (x *Scheduler) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Scheduler) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (m *Scheduler) GetConfig() isScheduler_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Scheduler) GetTcp() *TcpConfig {
	if x, ok := x.GetConfig().(*Scheduler_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Scheduler) GetSitemap() *SiteMapConfig {
	if x, ok := x.GetConfig().(*Scheduler_Sitemap); ok {
		return x.Sitemap
	}
	return nil
}

func (x *Scheduler) GetGrpc() *GrpcConfig {
	if x, ok := x.GetConfig().(*Scheduler_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (x *Scheduler) GetHttp() *HttpConfig {
	if x, ok := x.GetConfig().(*Scheduler_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Scheduler) GetHttpValue() *HttpJsonValueConfig {
	if x, ok := x.GetConfig().(*Scheduler_HttpValue); ok {
		return x.HttpValue
	}
	return nil
}

func (x *Scheduler) GetSslExpiration() *SslExpirationConfig {
	if x, ok := x.GetConfig().(*Scheduler_SslExpiration); ok {
		return x.SslExpiration
	}
	return nil
}

func (x *Scheduler) GetMongo() *DbConfig {
	if x, ok := x.GetConfig().(*Scheduler_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (x *Scheduler) GetPostgres() *DbConfig {
	if x, ok := x.GetConfig().(*Scheduler_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *Scheduler) GetCassandra() *DbConfig {
	if x, ok := x.GetConfig().(*Scheduler_Cassandra); ok {
		return x.Cassandra
	}
	return nil
}

func (x *Scheduler) GetMysql() *DbConfig {
	if x, ok := x.GetConfig().(*Scheduler_Mysql); ok {
		return x.Mysql
	}
	return nil
}

type isScheduler_Config interface {
	isScheduler_Config()
}

type Scheduler_Tcp struct {
	Tcp *TcpConfig `protobuf:"bytes,7,opt,name=tcp,proto3,oneof"`
}

type Scheduler_Sitemap struct {
	Sitemap *SiteMapConfig `protobuf:"bytes,8,opt,name=sitemap,proto3,oneof"`
}

type Scheduler_Grpc struct {
	Grpc *GrpcConfig `protobuf:"bytes,9,opt,name=grpc,proto3,oneof"`
}

type Scheduler_Http struct {
	Http *HttpConfig `protobuf:"bytes,10,opt,name=http,proto3,oneof"`
}

type Scheduler_HttpValue struct {
	HttpValue *HttpJsonValueConfig `protobuf:"bytes,11,opt,name=http_value,json=httpValue,proto3,oneof"`
}

type Scheduler_SslExpiration struct {
	SslExpiration *SslExpirationConfig `protobuf:"bytes,12,opt,name=ssl_expiration,json=sslExpiration,proto3,oneof"`
}

type Scheduler_Mongo struct {
	Mongo *DbConfig `protobuf:"bytes,13,opt,name=mongo,proto3,oneof"`
}

type Scheduler_Postgres struct {
	Postgres *DbConfig `protobuf:"bytes,14,opt,name=postgres,proto3,oneof"`
}

type Scheduler_Cassandra struct {
	Cassandra *DbConfig `protobuf:"bytes,15,opt,name=cassandra,proto3,oneof"`
}

type Scheduler_Mysql struct {
	Mysql *DbConfig `protobuf:"bytes,16,opt,name=mysql,proto3,oneof"`
}

func (*Scheduler_Tcp) isScheduler_Config() {}

func (*Scheduler_Sitemap) isScheduler_Config() {}

func (*Scheduler_Grpc) isScheduler_Config() {}

func (*Scheduler_Http) isScheduler_Config() {}

func (*Scheduler_HttpValue) isScheduler_Config() {}

func (*Scheduler_SslExpiration) isScheduler_Config() {}

func (*Scheduler_Mongo) isScheduler_Config() {}

func (*Scheduler_Postgres) isScheduler_Config() {}

func (*Scheduler_Cassandra) isScheduler_Config() {}

func (*Scheduler_Mysql) isScheduler_Config() {}

type GetSchedulerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lists []*Scheduler `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *GetSchedulerListResponse) Reset() {
	*x = GetSchedulerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerListResponse) ProtoMessage() {}

func (x *GetSchedulerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerListResponse.ProtoReflect.Descriptor instead.
func (*GetSchedulerListResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{4}
}

func (x *GetSchedulerListResponse) GetLists() []*Scheduler {
	if x != nil {
		return x.Lists
	}
	return nil
}

type SiteMapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Concurrency int32  `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
}

func (x *SiteMapConfig) Reset() {
	*x = SiteMapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteMapConfig) ProtoMessage() {}

func (x *SiteMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteMapConfig.ProtoReflect.Descriptor instead.
func (*SiteMapConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{5}
}

func (x *SiteMapConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SiteMapConfig) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

type TcpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TcpConfig) Reset() {
	*x = TcpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpConfig) ProtoMessage() {}

func (x *TcpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpConfig.ProtoReflect.Descriptor instead.
func (*TcpConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{6}
}

func (x *TcpConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TcpConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SslExpirationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SslExpirationConfig) Reset() {
	*x = SslExpirationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SslExpirationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SslExpirationConfig) ProtoMessage() {}

func (x *SslExpirationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SslExpirationConfig.ProtoReflect.Descriptor instead.
func (*SslExpirationConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{7}
}

func (x *SslExpirationConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SslExpirationConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	DbName   string `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Cluster  string `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DbConfig) Reset() {
	*x = DbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbConfig) ProtoMessage() {}

func (x *DbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbConfig.ProtoReflect.Descriptor instead.
func (*DbConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{8}
}

func (x *DbConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbConfig) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DbConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type GrpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Host    string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GrpcConfig) Reset() {
	*x = GrpcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcConfig) ProtoMessage() {}

func (x *GrpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcConfig.ProtoReflect.Descriptor instead.
func (*GrpcConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{9}
}

func (x *GrpcConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GrpcConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GrpcConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HttpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method     string            `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url        string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers    map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusCode int32             `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *HttpConfig) Reset() {
	*x = HttpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConfig) ProtoMessage() {}

func (x *HttpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConfig.ProtoReflect.Descriptor instead.
func (*HttpConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{10}
}

func (x *HttpConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpConfig) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type HttpJsonValueConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method    string                           `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url       string                           `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers   map[string]string                `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Selectors []*HttpJsonValueConfig_Selectors `protobuf:"bytes,4,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *HttpJsonValueConfig) Reset() {
	*x = HttpJsonValueConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpJsonValueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpJsonValueConfig) ProtoMessage() {}

func (x *HttpJsonValueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpJsonValueConfig.ProtoReflect.Descriptor instead.
func (*HttpJsonValueConfig) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{11}
}

func (x *HttpJsonValueConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpJsonValueConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpJsonValueConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpJsonValueConfig) GetSelectors() []*HttpJsonValueConfig_Selectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type AddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How often we need execute check
	Interval int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Timeout for check request
	Timeout int32  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Config:
	//
	//	*AddRequest_Tcp
	//	*AddRequest_Sitemap
	//	*AddRequest_Grpc
	//	*AddRequest_Http
	//	*AddRequest_HttpValue
	//	*AddRequest_SslExpiration
	//	*AddRequest_Mongo
	//	*AddRequest_Postgres
	//	*AddRequest_Cassandra
	//	*AddRequest_Mysql
	Config isAddRequest_Config `protobuf_oneof:"config"`
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{12}
}

func (x *AddRequest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *AddRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *AddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *AddRequest) GetConfig() isAddRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *AddRequest) GetTcp() *TcpConfig {
	if x, ok := x.GetConfig().(*AddRequest_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *AddRequest) GetSitemap() *SiteMapConfig {
	if x, ok := x.GetConfig().(*AddRequest_Sitemap); ok {
		return x.Sitemap
	}
	return nil
}

func (x *AddRequest) GetGrpc() *GrpcConfig {
	if x, ok := x.GetConfig().(*AddRequest_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (x *AddRequest) GetHttp() *HttpConfig {
	if x, ok := x.GetConfig().(*AddRequest_Http); ok {
		return x.Http
	}
	return nil
}

func (x *AddRequest) GetHttpValue() *HttpJsonValueConfig {
	if x, ok := x.GetConfig().(*AddRequest_HttpValue); ok {
		return x.HttpValue
	}
	return nil
}

func (x *AddRequest) GetSslExpiration() *SslExpirationConfig {
	if x, ok := x.GetConfig().(*AddRequest_SslExpiration); ok {
		return x.SslExpiration
	}
	return nil
}

func (x *AddRequest) GetMongo() *DbConfig {
	if x, ok := x.GetConfig().(*AddRequest_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (x *AddRequest) GetPostgres() *DbConfig {
	if x, ok := x.GetConfig().(*AddRequest_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *AddRequest) GetCassandra() *DbConfig {
	if x, ok := x.GetConfig().(*AddRequest_Cassandra); ok {
		return x.Cassandra
	}
	return nil
}

func (x *AddRequest) GetMysql() *DbConfig {
	if x, ok := x.GetConfig().(*AddRequest_Mysql); ok {
		return x.Mysql
	}
	return nil
}

type isAddRequest_Config interface {
	isAddRequest_Config()
}

type AddRequest_Tcp struct {
	Tcp *TcpConfig `protobuf:"bytes,4,opt,name=tcp,proto3,oneof"`
}

type AddRequest_Sitemap struct {
	Sitemap *SiteMapConfig `protobuf:"bytes,5,opt,name=sitemap,proto3,oneof"`
}

type AddRequest_Grpc struct {
	Grpc *GrpcConfig `protobuf:"bytes,6,opt,name=grpc,proto3,oneof"`
}

type AddRequest_Http struct {
	Http *HttpConfig `protobuf:"bytes,7,opt,name=http,proto3,oneof"`
}

type AddRequest_HttpValue struct {
	HttpValue *HttpJsonValueConfig `protobuf:"bytes,8,opt,name=http_value,json=httpValue,proto3,oneof"`
}

type AddRequest_SslExpiration struct {
	SslExpiration *SslExpirationConfig `protobuf:"bytes,9,opt,name=ssl_expiration,json=sslExpiration,proto3,oneof"`
}

type AddRequest_Mongo struct {
	Mongo *DbConfig `protobuf:"bytes,10,opt,name=mongo,proto3,oneof"`
}

type AddRequest_Postgres struct {
	Postgres *DbConfig `protobuf:"bytes,11,opt,name=postgres,proto3,oneof"`
}

type AddRequest_Cassandra struct {
	Cassandra *DbConfig `protobuf:"bytes,12,opt,name=cassandra,proto3,oneof"`
}

type AddRequest_Mysql struct {
	Mysql *DbConfig `protobuf:"bytes,13,opt,name=mysql,proto3,oneof"`
}

func (*AddRequest_Tcp) isAddRequest_Config() {}

func (*AddRequest_Sitemap) isAddRequest_Config() {}

func (*AddRequest_Grpc) isAddRequest_Config() {}

func (*AddRequest_Http) isAddRequest_Config() {}

func (*AddRequest_HttpValue) isAddRequest_Config() {}

func (*AddRequest_SslExpiration) isAddRequest_Config() {}

func (*AddRequest_Mongo) isAddRequest_Config() {}

func (*AddRequest_Postgres) isAddRequest_Config() {}

func (*AddRequest_Cassandra) isAddRequest_Config() {}

func (*AddRequest_Mysql) isAddRequest_Config() {}

type AddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponse.ProtoReflect.Descriptor instead.
func (*AddResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{13}
}

func (x *AddResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveResponse) Reset() {
	*x = RemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResponse) ProtoMessage() {}

func (x *RemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResponse.ProtoReflect.Descriptor instead.
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{16}
}

func (x *RunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{17}
}

func (x *StopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{18}
}

func (x *RunResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{19}
}

func (x *StopResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SchedulerSnapshot_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SchedulerSnapshot_Error) Reset() {
	*x = SchedulerSnapshot_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerSnapshot_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerSnapshot_Error) ProtoMessage() {}

func (x *SchedulerSnapshot_Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerSnapshot_Error.ProtoReflect.Descriptor instead.
func (*SchedulerSnapshot_Error) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SchedulerSnapshot_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SchedulerSnapshot_MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Value     *structpb.Value        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SchedulerSnapshot_MetaData) Reset() {
	*x = SchedulerSnapshot_MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerSnapshot_MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerSnapshot_MetaData) ProtoMessage() {}

func (x *SchedulerSnapshot_MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerSnapshot_MetaData.ProtoReflect.Descriptor instead.
func (*SchedulerSnapshot_MetaData) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SchedulerSnapshot_MetaData) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SchedulerSnapshot_MetaData) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SchedulerSnapshot_MetaData) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type HttpJsonValueConfig_Selectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type HttpJsonValueConfig_JsonValueParseType `protobuf:"varint,1,opt,name=type,proto3,enum=squzy.v1.monitoring.HttpJsonValueConfig_JsonValueParseType" json:"type,omitempty"`
	Path string                                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HttpJsonValueConfig_Selectors) Reset() {
	*x = HttpJsonValueConfig_Selectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpJsonValueConfig_Selectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpJsonValueConfig_Selectors) ProtoMessage() {}

func (x *HttpJsonValueConfig_Selectors) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_squzy_monitoring_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpJsonValueConfig_Selectors.ProtoReflect.Descriptor instead.
func (*HttpJsonValueConfig_Selectors) Descriptor() ([]byte, []int) {
	return file_proto_v1_squzy_monitoring_proto_rawDescGZIP(), []int{11, 1}
}

func (x *HttpJsonValueConfig_Selectors) GetType() HttpJsonValueConfig_JsonValueParseType {
	if x != nil {
		return x.Type
	}
	return HttpJsonValueConfig_JSON_PARSE_VALUE_UNSPECIFIED
}

func (x *HttpJsonValueConfig_Selectors) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_proto_v1_squzy_monitoring_proto protoreflect.FileDescriptor

var file_proto_v1_squzy_monitoring_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x75, 0x7a, 0x79,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xdc, 0x03, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x71, 0x75, 0x7a,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x1a, 0x21, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcf, 0x06, 0x0a, 0x09,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x71,
	0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x63, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x63, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x3e, 0x0a,
	0x07, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x35, 0x0a,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x71,
	0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x12, 0x35, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x49, 0x0a, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x73, 0x6c, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x73, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x73, 0x6c, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x12, 0x35, 0x0a, 0x05,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71,
	0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x50, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x43, 0x0a, 0x0d, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x33, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x53, 0x73, 0x6c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x44, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x4e, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x71, 0x75,
	0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86,
	0x04, 0x0a, 0x13, 0x48, 0x74, 0x74, 0x70, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x4f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4a, 0x73, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4a,
	0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x70, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x71, 0x75,
	0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x74, 0x0a, 0x12, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4a, 0x53, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x06, 0x22, 0xca, 0x05, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x03, 0x74, 0x63, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x74,
	0x65, 0x6d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x35, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x71, 0x75, 0x7a,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x12, 0x49, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x73, 0x73, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x73, 0x6c, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x73, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e,
	0x64, 0x72, 0x61, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x1d, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x2a, 0x42, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x55, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xb6, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x52, 0x50, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x53, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x47, 0x4f,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x53, 0x53, 0x41, 0x4e, 0x44, 0x52, 0x41, 0x10, 0x09, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x0a, 0x32, 0x85, 0x04, 0x0a, 0x12, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e,
	0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x2c, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x1f, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x52,
	0x75, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x2e,
	0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x2f, 0x73, 0x71, 0x75, 0x7a, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_v1_squzy_monitoring_proto_rawDescOnce sync.Once
	file_proto_v1_squzy_monitoring_proto_rawDescData = file_proto_v1_squzy_monitoring_proto_rawDesc
)

func file_proto_v1_squzy_monitoring_proto_rawDescGZIP() []byte {
	file_proto_v1_squzy_monitoring_proto_rawDescOnce.Do(func() {
		file_proto_v1_squzy_monitoring_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_v1_squzy_monitoring_proto_rawDescData)
	})
	return file_proto_v1_squzy_monitoring_proto_rawDescData
}

var file_proto_v1_squzy_monitoring_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_v1_squzy_monitoring_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_v1_squzy_monitoring_proto_goTypes = []interface{}{
	(SchedulerCode)(0),                          // 0: squzy.v1.monitoring.SchedulerCode
	(SchedulerStatus)(0),                        // 1: squzy.v1.monitoring.SchedulerStatus
	(SchedulerType)(0),                          // 2: squzy.v1.monitoring.SchedulerType
	(HttpJsonValueConfig_JsonValueParseType)(0), // 3: squzy.v1.monitoring.HttpJsonValueConfig.JsonValueParseType
	(*SchedulerSnapshotWithId)(nil),             // 4: squzy.v1.monitoring.SchedulerSnapshotWithId
	(*SchedulerSnapshot)(nil),                   // 5: squzy.v1.monitoring.SchedulerSnapshot
	(*GetSchedulerByIdRequest)(nil),             // 6: squzy.v1.monitoring.GetSchedulerByIdRequest
	(*Scheduler)(nil),                           // 7: squzy.v1.monitoring.Scheduler
	(*GetSchedulerListResponse)(nil),            // 8: squzy.v1.monitoring.GetSchedulerListResponse
	(*SiteMapConfig)(nil),                       // 9: squzy.v1.monitoring.SiteMapConfig
	(*TcpConfig)(nil),                           // 10: squzy.v1.monitoring.TcpConfig
	(*SslExpirationConfig)(nil),                 // 11: squzy.v1.monitoring.SslExpirationConfig
	(*DbConfig)(nil),                            // 12: squzy.v1.monitoring.DbConfig
	(*GrpcConfig)(nil),                          // 13: squzy.v1.monitoring.GrpcConfig
	(*HttpConfig)(nil),                          // 14: squzy.v1.monitoring.HttpConfig
	(*HttpJsonValueConfig)(nil),                 // 15: squzy.v1.monitoring.HttpJsonValueConfig
	(*AddRequest)(nil),                          // 16: squzy.v1.monitoring.AddRequest
	(*AddResponse)(nil),                         // 17: squzy.v1.monitoring.AddResponse
	(*RemoveRequest)(nil),                       // 18: squzy.v1.monitoring.RemoveRequest
	(*RemoveResponse)(nil),                      // 19: squzy.v1.monitoring.RemoveResponse
	(*RunRequest)(nil),                          // 20: squzy.v1.monitoring.RunRequest
	(*StopRequest)(nil),                         // 21: squzy.v1.monitoring.StopRequest
	(*RunResponse)(nil),                         // 22: squzy.v1.monitoring.RunResponse
	(*StopResponse)(nil),                        // 23: squzy.v1.monitoring.StopResponse
	(*SchedulerSnapshot_Error)(nil),             // 24: squzy.v1.monitoring.SchedulerSnapshot.Error
	(*SchedulerSnapshot_MetaData)(nil),          // 25: squzy.v1.monitoring.SchedulerSnapshot.MetaData
	nil,                                         // 26: squzy.v1.monitoring.HttpConfig.HeadersEntry
	nil,                                         // 27: squzy.v1.monitoring.HttpJsonValueConfig.HeadersEntry
	(*HttpJsonValueConfig_Selectors)(nil),       // 28: squzy.v1.monitoring.HttpJsonValueConfig.Selectors
	(*timestamppb.Timestamp)(nil),               // 29: google.protobuf.Timestamp
	(*structpb.Value)(nil),                      // 30: google.protobuf.Value
	(*emptypb.Empty)(nil),                       // 31: google.protobuf.Empty
}
var file_proto_v1_squzy_monitoring_proto_depIdxs = []int32{
	5,  // 0: squzy.v1.monitoring.SchedulerSnapshotWithId.snapshot:type_name -> squzy.v1.monitoring.SchedulerSnapshot
	0,  // 1: squzy.v1.monitoring.SchedulerSnapshot.code:type_name -> squzy.v1.monitoring.SchedulerCode
	2,  // 2: squzy.v1.monitoring.SchedulerSnapshot.type:type_name -> squzy.v1.monitoring.SchedulerType
	24, // 3: squzy.v1.monitoring.SchedulerSnapshot.error:type_name -> squzy.v1.monitoring.SchedulerSnapshot.Error
	25, // 4: squzy.v1.monitoring.SchedulerSnapshot.meta:type_name -> squzy.v1.monitoring.SchedulerSnapshot.MetaData
	2,  // 5: squzy.v1.monitoring.Scheduler.type:type_name -> squzy.v1.monitoring.SchedulerType
	1,  // 6: squzy.v1.monitoring.Scheduler.status:type_name -> squzy.v1.monitoring.SchedulerStatus
	10, // 7: squzy.v1.monitoring.Scheduler.tcp:type_name -> squzy.v1.monitoring.TcpConfig
	9,  // 8: squzy.v1.monitoring.Scheduler.sitemap:type_name -> squzy.v1.monitoring.SiteMapConfig
	13, // 9: squzy.v1.monitoring.Scheduler.grpc:type_name -> squzy.v1.monitoring.GrpcConfig
	14, // 10: squzy.v1.monitoring.Scheduler.http:type_name -> squzy.v1.monitoring.HttpConfig
	15, // 11: squzy.v1.monitoring.Scheduler.http_value:type_name -> squzy.v1.monitoring.HttpJsonValueConfig
	11, // 12: squzy.v1.monitoring.Scheduler.ssl_expiration:type_name -> squzy.v1.monitoring.SslExpirationConfig
	12, // 13: squzy.v1.monitoring.Scheduler.mongo:type_name -> squzy.v1.monitoring.DbConfig
	12, // 14: squzy.v1.monitoring.Scheduler.postgres:type_name -> squzy.v1.monitoring.DbConfig
	12, // 15: squzy.v1.monitoring.Scheduler.cassandra:type_name -> squzy.v1.monitoring.DbConfig
	12, // 16: squzy.v1.monitoring.Scheduler.mysql:type_name -> squzy.v1.monitoring.DbConfig
	7,  // 17: squzy.v1.monitoring.GetSchedulerListResponse.lists:type_name -> squzy.v1.monitoring.Scheduler
	26, // 18: squzy.v1.monitoring.HttpConfig.headers:type_name -> squzy.v1.monitoring.HttpConfig.HeadersEntry
	27, // 19: squzy.v1.monitoring.HttpJsonValueConfig.headers:type_name -> squzy.v1.monitoring.HttpJsonValueConfig.HeadersEntry
	28, // 20: squzy.v1.monitoring.HttpJsonValueConfig.selectors:type_name -> squzy.v1.monitoring.HttpJsonValueConfig.Selectors
	10, // 21: squzy.v1.monitoring.AddRequest.tcp:type_name -> squzy.v1.monitoring.TcpConfig
	9,  // 22: squzy.v1.monitoring.AddRequest.sitemap:type_name -> squzy.v1.monitoring.SiteMapConfig
	13, // 23: squzy.v1.monitoring.AddRequest.grpc:type_name -> squzy.v1.monitoring.GrpcConfig
	14, // 24: squzy.v1.monitoring.AddRequest.http:type_name -> squzy.v1.monitoring.HttpConfig
	15, // 25: squzy.v1.monitoring.AddRequest.http_value:type_name -> squzy.v1.monitoring.HttpJsonValueConfig
	11, // 26: squzy.v1.monitoring.AddRequest.ssl_expiration:type_name -> squzy.v1.monitoring.SslExpirationConfig
	12, // 27: squzy.v1.monitoring.AddRequest.mongo:type_name -> squzy.v1.monitoring.DbConfig
	12, // 28: squzy.v1.monitoring.AddRequest.postgres:type_name -> squzy.v1.monitoring.DbConfig
	12, // 29: squzy.v1.monitoring.AddRequest.cassandra:type_name -> squzy.v1.monitoring.DbConfig
	12, // 30: squzy.v1.monitoring.AddRequest.mysql:type_name -> squzy.v1.monitoring.DbConfig
	29, // 31: squzy.v1.monitoring.SchedulerSnapshot.MetaData.start_time:type_name -> google.protobuf.Timestamp
	29, // 32: squzy.v1.monitoring.SchedulerSnapshot.MetaData.end_time:type_name -> google.protobuf.Timestamp
	30, // 33: squzy.v1.monitoring.SchedulerSnapshot.MetaData.value:type_name -> google.protobuf.Value
	3,  // 34: squzy.v1.monitoring.HttpJsonValueConfig.Selectors.type:type_name -> squzy.v1.monitoring.HttpJsonValueConfig.JsonValueParseType
	31, // 35: squzy.v1.monitoring.SchedulersExecutor.GetSchedulerList:input_type -> google.protobuf.Empty
	6,  // 36: squzy.v1.monitoring.SchedulersExecutor.GetSchedulerById:input_type -> squzy.v1.monitoring.GetSchedulerByIdRequest
	16, // 37: squzy.v1.monitoring.SchedulersExecutor.Add:input_type -> squzy.v1.monitoring.AddRequest
	18, // 38: squzy.v1.monitoring.SchedulersExecutor.Remove:input_type -> squzy.v1.monitoring.RemoveRequest
	20, // 39: squzy.v1.monitoring.SchedulersExecutor.Run:input_type -> squzy.v1.monitoring.RunRequest
	21, // 40: squzy.v1.monitoring.SchedulersExecutor.Stop:input_type -> squzy.v1.monitoring.StopRequest
	8,  // 41: squzy.v1.monitoring.SchedulersExecutor.GetSchedulerList:output_type -> squzy.v1.monitoring.GetSchedulerListResponse
	7,  // 42: squzy.v1.monitoring.SchedulersExecutor.GetSchedulerById:output_type -> squzy.v1.monitoring.Scheduler
	17, // 43: squzy.v1.monitoring.SchedulersExecutor.Add:output_type -> squzy.v1.monitoring.AddResponse
	19, // 44: squzy.v1.monitoring.SchedulersExecutor.Remove:output_type -> squzy.v1.monitoring.RemoveResponse
	22, // 45: squzy.v1.monitoring.SchedulersExecutor.Run:output_type -> squzy.v1.monitoring.RunResponse
	23, // 46: squzy.v1.monitoring.SchedulersExecutor.Stop:output_type -> squzy.v1.monitoring.StopResponse
	41, // [41:47] is the sub-list for method output_type
	35, // [35:41] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_proto_v1_squzy_monitoring_proto_init() }
func file_proto_v1_squzy_monitoring_proto_init() {
	if File_proto_v1_squzy_monitoring_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_v1_squzy_monitoring_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerSnapshotWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteMapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SslExpirationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpJsonValueConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerSnapshot_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerSnapshot_MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_v1_squzy_monitoring_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpJsonValueConfig_Selectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_v1_squzy_monitoring_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Scheduler_Tcp)(nil),
		(*Scheduler_Sitemap)(nil),
		(*Scheduler_Grpc)(nil),
		(*Scheduler_Http)(nil),
		(*Scheduler_HttpValue)(nil),
		(*Scheduler_SslExpiration)(nil),
		(*Scheduler_Mongo)(nil),
		(*Scheduler_Postgres)(nil),
		(*Scheduler_Cassandra)(nil),
		(*Scheduler_Mysql)(nil),
	}
	file_proto_v1_squzy_monitoring_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AddRequest_Tcp)(nil),
		(*AddRequest_Sitemap)(nil),
		(*AddRequest_Grpc)(nil),
		(*AddRequest_Http)(nil),
		(*AddRequest_HttpValue)(nil),
		(*AddRequest_SslExpiration)(nil),
		(*AddRequest_Mongo)(nil),
		(*AddRequest_Postgres)(nil),
		(*AddRequest_Cassandra)(nil),
		(*AddRequest_Mysql)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_v1_squzy_monitoring_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_v1_squzy_monitoring_proto_goTypes,
		DependencyIndexes: file_proto_v1_squzy_monitoring_proto_depIdxs,
		EnumInfos:         file_proto_v1_squzy_monitoring_proto_enumTypes,
		MessageInfos:      file_proto_v1_squzy_monitoring_proto_msgTypes,
	}.Build()
	File_proto_v1_squzy_monitoring_proto = out.File
	file_proto_v1_squzy_monitoring_proto_rawDesc = nil
	file_proto_v1_squzy_monitoring_proto_goTypes = nil
	file_proto_v1_squzy_monitoring_proto_depIdxs = nil
}
