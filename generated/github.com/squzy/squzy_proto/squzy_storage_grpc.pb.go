// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/v1/squzy_storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	// To save info about checkers
	// protolint:disable:next MAX_LINE_LENGTH
	SaveResponseFromScheduler(ctx context.Context, in *SchedulerResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// To save info about agent
	// protolint:disable:next MAX_LINE_LENGTH
	SaveResponseFromAgent(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Save information from application monitoring
	// protolint:disable:next MAX_LINE_LENGTH
	SaveTransaction(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetSchedulerInformation(ctx context.Context, in *GetSchedulerInformationRequest, opts ...grpc.CallOption) (*GetSchedulerInformationResponse, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetSchedulerUptime(ctx context.Context, in *GetSchedulerUptimeRequest, opts ...grpc.CallOption) (*GetSchedulerUptimeResponse, error)
	// To send info about about agent
	// protolint:disable:next MAX_LINE_LENGTH
	GetAgentInformation(ctx context.Context, in *GetAgentInformationRequest, opts ...grpc.CallOption) (*GetAgentInformationResponse, error)
	// Return grouped transactions via group
	// protolint:disable:next MAX_LINE_LENGTH
	GetTransactionsGroup(ctx context.Context, in *GetTransactionGroupRequest, opts ...grpc.CallOption) (*GetTransactionGroupResponse, error)
	// Returns list of transaction via filter
	// protolint:disable:next MAX_LINE_LENGTH
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error)
	// Save incident from incident service
	SaveIncident(ctx context.Context, in *Incident, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update incident status from incident service
	// protolint:disable:next MAX_LINE_LENGTH
	UpdateIncidentStatus(ctx context.Context, in *UpdateIncidentStatusRequest, opts ...grpc.CallOption) (*Incident, error)
	// Get incident by ID
	// protolint:disable:next MAX_LINE_LENGTH
	GetIncidentById(ctx context.Context, in *IncidentIdRequest, opts ...grpc.CallOption) (*Incident, error)
	// Get incident by rule id, should be just one active incident per rule
	// protolint:disable:next MAX_LINE_LENGTH
	GetIncidentByRuleId(ctx context.Context, in *RuleIdRequest, opts ...grpc.CallOption) (*Incident, error)
	// Get list with filters
	// protolint:disable:next MAX_LINE_LENGTH
	GetIncidentsList(ctx context.Context, in *GetIncidentsListRequest, opts ...grpc.CallOption) (*GetIncidentsListResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) SaveResponseFromScheduler(ctx context.Context, in *SchedulerResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/SaveResponseFromScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SaveResponseFromAgent(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/SaveResponseFromAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SaveTransaction(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/SaveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSchedulerInformation(ctx context.Context, in *GetSchedulerInformationRequest, opts ...grpc.CallOption) (*GetSchedulerInformationResponse, error) {
	out := new(GetSchedulerInformationResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetSchedulerInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSchedulerUptime(ctx context.Context, in *GetSchedulerUptimeRequest, opts ...grpc.CallOption) (*GetSchedulerUptimeResponse, error) {
	out := new(GetSchedulerUptimeResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetSchedulerUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetAgentInformation(ctx context.Context, in *GetAgentInformationRequest, opts ...grpc.CallOption) (*GetAgentInformationResponse, error) {
	out := new(GetAgentInformationResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetAgentInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTransactionsGroup(ctx context.Context, in *GetTransactionGroupRequest, opts ...grpc.CallOption) (*GetTransactionGroupResponse, error) {
	out := new(GetTransactionGroupResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetTransactionsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error) {
	out := new(GetTransactionByIdResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SaveIncident(ctx context.Context, in *Incident, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/SaveIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateIncidentStatus(ctx context.Context, in *UpdateIncidentStatusRequest, opts ...grpc.CallOption) (*Incident, error) {
	out := new(Incident)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/UpdateIncidentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetIncidentById(ctx context.Context, in *IncidentIdRequest, opts ...grpc.CallOption) (*Incident, error) {
	out := new(Incident)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetIncidentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetIncidentByRuleId(ctx context.Context, in *RuleIdRequest, opts ...grpc.CallOption) (*Incident, error) {
	out := new(Incident)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetIncidentByRuleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetIncidentsList(ctx context.Context, in *GetIncidentsListRequest, opts ...grpc.CallOption) (*GetIncidentsListResponse, error) {
	out := new(GetIncidentsListResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/GetIncidentsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	// To save info about checkers
	// protolint:disable:next MAX_LINE_LENGTH
	SaveResponseFromScheduler(context.Context, *SchedulerResponse) (*emptypb.Empty, error)
	// To save info about agent
	// protolint:disable:next MAX_LINE_LENGTH
	SaveResponseFromAgent(context.Context, *Metric) (*emptypb.Empty, error)
	// Save information from application monitoring
	// protolint:disable:next MAX_LINE_LENGTH
	SaveTransaction(context.Context, *TransactionInfo) (*emptypb.Empty, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetSchedulerInformation(context.Context, *GetSchedulerInformationRequest) (*GetSchedulerInformationResponse, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetSchedulerUptime(context.Context, *GetSchedulerUptimeRequest) (*GetSchedulerUptimeResponse, error)
	// To send info about about agent
	// protolint:disable:next MAX_LINE_LENGTH
	GetAgentInformation(context.Context, *GetAgentInformationRequest) (*GetAgentInformationResponse, error)
	// Return grouped transactions via group
	// protolint:disable:next MAX_LINE_LENGTH
	GetTransactionsGroup(context.Context, *GetTransactionGroupRequest) (*GetTransactionGroupResponse, error)
	// Returns list of transaction via filter
	// protolint:disable:next MAX_LINE_LENGTH
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	// protolint:disable:next MAX_LINE_LENGTH
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error)
	// Save incident from incident service
	SaveIncident(context.Context, *Incident) (*emptypb.Empty, error)
	// Update incident status from incident service
	// protolint:disable:next MAX_LINE_LENGTH
	UpdateIncidentStatus(context.Context, *UpdateIncidentStatusRequest) (*Incident, error)
	// Get incident by ID
	// protolint:disable:next MAX_LINE_LENGTH
	GetIncidentById(context.Context, *IncidentIdRequest) (*Incident, error)
	// Get incident by rule id, should be just one active incident per rule
	// protolint:disable:next MAX_LINE_LENGTH
	GetIncidentByRuleId(context.Context, *RuleIdRequest) (*Incident, error)
	// Get list with filters
	// protolint:disable:next MAX_LINE_LENGTH
	GetIncidentsList(context.Context, *GetIncidentsListRequest) (*GetIncidentsListResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) SaveResponseFromScheduler(context.Context, *SchedulerResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveResponseFromScheduler not implemented")
}
func (UnimplementedStorageServer) SaveResponseFromAgent(context.Context, *Metric) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveResponseFromAgent not implemented")
}
func (UnimplementedStorageServer) SaveTransaction(context.Context, *TransactionInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTransaction not implemented")
}
func (UnimplementedStorageServer) GetSchedulerInformation(context.Context, *GetSchedulerInformationRequest) (*GetSchedulerInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerInformation not implemented")
}
func (UnimplementedStorageServer) GetSchedulerUptime(context.Context, *GetSchedulerUptimeRequest) (*GetSchedulerUptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerUptime not implemented")
}
func (UnimplementedStorageServer) GetAgentInformation(context.Context, *GetAgentInformationRequest) (*GetAgentInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInformation not implemented")
}
func (UnimplementedStorageServer) GetTransactionsGroup(context.Context, *GetTransactionGroupRequest) (*GetTransactionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsGroup not implemented")
}
func (UnimplementedStorageServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedStorageServer) GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedStorageServer) SaveIncident(context.Context, *Incident) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIncident not implemented")
}
func (UnimplementedStorageServer) UpdateIncidentStatus(context.Context, *UpdateIncidentStatusRequest) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncidentStatus not implemented")
}
func (UnimplementedStorageServer) GetIncidentById(context.Context, *IncidentIdRequest) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidentById not implemented")
}
func (UnimplementedStorageServer) GetIncidentByRuleId(context.Context, *RuleIdRequest) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidentByRuleId not implemented")
}
func (UnimplementedStorageServer) GetIncidentsList(context.Context, *GetIncidentsListRequest) (*GetIncidentsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidentsList not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_SaveResponseFromScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SaveResponseFromScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/SaveResponseFromScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SaveResponseFromScheduler(ctx, req.(*SchedulerResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SaveResponseFromAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SaveResponseFromAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/SaveResponseFromAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SaveResponseFromAgent(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SaveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SaveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/SaveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SaveTransaction(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSchedulerInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSchedulerInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetSchedulerInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSchedulerInformation(ctx, req.(*GetSchedulerInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSchedulerUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerUptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSchedulerUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetSchedulerUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSchedulerUptime(ctx, req.(*GetSchedulerUptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetAgentInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetAgentInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetAgentInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetAgentInformation(ctx, req.(*GetAgentInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTransactionsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTransactionsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetTransactionsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTransactionsGroup(ctx, req.(*GetTransactionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SaveIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Incident)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SaveIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/SaveIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SaveIncident(ctx, req.(*Incident))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateIncidentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncidentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateIncidentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/UpdateIncidentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateIncidentStatus(ctx, req.(*UpdateIncidentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetIncidentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetIncidentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetIncidentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetIncidentById(ctx, req.(*IncidentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetIncidentByRuleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetIncidentByRuleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetIncidentByRuleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetIncidentByRuleId(ctx, req.(*RuleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetIncidentsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetIncidentsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/GetIncidentsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetIncidentsList(ctx, req.(*GetIncidentsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.v1.storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveResponseFromScheduler",
			Handler:    _Storage_SaveResponseFromScheduler_Handler,
		},
		{
			MethodName: "SaveResponseFromAgent",
			Handler:    _Storage_SaveResponseFromAgent_Handler,
		},
		{
			MethodName: "SaveTransaction",
			Handler:    _Storage_SaveTransaction_Handler,
		},
		{
			MethodName: "GetSchedulerInformation",
			Handler:    _Storage_GetSchedulerInformation_Handler,
		},
		{
			MethodName: "GetSchedulerUptime",
			Handler:    _Storage_GetSchedulerUptime_Handler,
		},
		{
			MethodName: "GetAgentInformation",
			Handler:    _Storage_GetAgentInformation_Handler,
		},
		{
			MethodName: "GetTransactionsGroup",
			Handler:    _Storage_GetTransactionsGroup_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Storage_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Storage_GetTransactionById_Handler,
		},
		{
			MethodName: "SaveIncident",
			Handler:    _Storage_SaveIncident_Handler,
		},
		{
			MethodName: "UpdateIncidentStatus",
			Handler:    _Storage_UpdateIncidentStatus_Handler,
		},
		{
			MethodName: "GetIncidentById",
			Handler:    _Storage_GetIncidentById_Handler,
		},
		{
			MethodName: "GetIncidentByRuleId",
			Handler:    _Storage_GetIncidentByRuleId_Handler,
		},
		{
			MethodName: "GetIncidentsList",
			Handler:    _Storage_GetIncidentsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/squzy_storage.proto",
}
