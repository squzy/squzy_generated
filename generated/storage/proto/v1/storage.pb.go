// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/storage.proto

package squzy_storage_v1_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_Tcp         Type = 0
	Type_Grpc        Type = 1
	Type_Http        Type = 2
	Type_SiteMap     Type = 3
	Type_MongoDb     Type = 4
	Type_PostgresDb  Type = 5
	Type_CassandraDb Type = 6
	Type_MysqlDb     Type = 7
)

var Type_name = map[int32]string{
	0: "Tcp",
	1: "Grpc",
	2: "Http",
	3: "SiteMap",
	4: "MongoDb",
	5: "PostgresDb",
	6: "CassandraDb",
	7: "MysqlDb",
}

var Type_value = map[string]int32{
	"Tcp":         0,
	"Grpc":        1,
	"Http":        2,
	"SiteMap":     3,
	"MongoDb":     4,
	"PostgresDb":  5,
	"CassandraDb": 6,
	"MysqlDb":     7,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_65bd54e225cb21b3, []int{0}
}

type StatusCode int32

const (
	StatusCode_OK    StatusCode = 0
	StatusCode_Error StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "OK",
	1: "Error",
}

var StatusCode_value = map[string]int32{
	"OK":    0,
	"Error": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_65bd54e225cb21b3, []int{1}
}

type Log struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=squzy.storage.v1.service.StatusCode" json:"code,omitempty"`
	Description          string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Meta                 *MetaData  `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_65bd54e225cb21b3, []int{0}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_OK
}

func (m *Log) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Log) GetMeta() *MetaData {
	if m != nil {
		return m.Meta
	}
	return nil
}

type MetaData struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location             string               `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Port                 int32                `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Type                 Type                 `protobuf:"varint,5,opt,name=type,proto3,enum=squzy.storage.v1.service.Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MetaData) Reset()         { *m = MetaData{} }
func (m *MetaData) String() string { return proto.CompactTextString(m) }
func (*MetaData) ProtoMessage()    {}
func (*MetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_65bd54e225cb21b3, []int{1}
}

func (m *MetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaData.Unmarshal(m, b)
}
func (m *MetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaData.Marshal(b, m, deterministic)
}
func (m *MetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaData.Merge(m, src)
}
func (m *MetaData) XXX_Size() int {
	return xxx_messageInfo_MetaData.Size(m)
}
func (m *MetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaData.DiscardUnknown(m)
}

var xxx_messageInfo_MetaData proto.InternalMessageInfo

func (m *MetaData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MetaData) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MetaData) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MetaData) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *MetaData) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_Tcp
}

type SendLogMessageRequest struct {
	Log                  *Log     `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	SchedulerId          string   `protobuf:"bytes,2,opt,name=schedulerId,proto3" json:"schedulerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendLogMessageRequest) Reset()         { *m = SendLogMessageRequest{} }
func (m *SendLogMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendLogMessageRequest) ProtoMessage()    {}
func (*SendLogMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65bd54e225cb21b3, []int{2}
}

func (m *SendLogMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendLogMessageRequest.Unmarshal(m, b)
}
func (m *SendLogMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendLogMessageRequest.Marshal(b, m, deterministic)
}
func (m *SendLogMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendLogMessageRequest.Merge(m, src)
}
func (m *SendLogMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SendLogMessageRequest.Size(m)
}
func (m *SendLogMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendLogMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendLogMessageRequest proto.InternalMessageInfo

func (m *SendLogMessageRequest) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *SendLogMessageRequest) GetSchedulerId() string {
	if m != nil {
		return m.SchedulerId
	}
	return ""
}

type SendLogMessageResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendLogMessageResponse) Reset()         { *m = SendLogMessageResponse{} }
func (m *SendLogMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SendLogMessageResponse) ProtoMessage()    {}
func (*SendLogMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65bd54e225cb21b3, []int{3}
}

func (m *SendLogMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendLogMessageResponse.Unmarshal(m, b)
}
func (m *SendLogMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendLogMessageResponse.Marshal(b, m, deterministic)
}
func (m *SendLogMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendLogMessageResponse.Merge(m, src)
}
func (m *SendLogMessageResponse) XXX_Size() int {
	return xxx_messageInfo_SendLogMessageResponse.Size(m)
}
func (m *SendLogMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendLogMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendLogMessageResponse proto.InternalMessageInfo

func (m *SendLogMessageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterEnum("squzy.storage.v1.service.Type", Type_name, Type_value)
	proto.RegisterEnum("squzy.storage.v1.service.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*Log)(nil), "squzy.storage.v1.service.Log")
	proto.RegisterType((*MetaData)(nil), "squzy.storage.v1.service.MetaData")
	proto.RegisterType((*SendLogMessageRequest)(nil), "squzy.storage.v1.service.SendLogMessageRequest")
	proto.RegisterType((*SendLogMessageResponse)(nil), "squzy.storage.v1.service.SendLogMessageResponse")
}

func init() { proto.RegisterFile("proto/v1/storage.proto", fileDescriptor_65bd54e225cb21b3) }

var fileDescriptor_65bd54e225cb21b3 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0xaa, 0xd3, 0x40,
	0x10, 0xc6, 0x4f, 0xda, 0xf4, 0xdf, 0x14, 0x6a, 0x18, 0xf0, 0x10, 0x0a, 0x7a, 0x4a, 0xf1, 0xa2,
	0x9c, 0x8b, 0xc4, 0x13, 0x41, 0xbc, 0x3f, 0x15, 0x15, 0x5b, 0x94, 0xb4, 0x2f, 0xb0, 0x49, 0xc6,
	0x35, 0xda, 0x76, 0xb7, 0x3b, 0x9b, 0x42, 0x05, 0x1f, 0xc4, 0x97, 0xf0, 0x19, 0x25, 0x5b, 0xa2,
	0x55, 0xac, 0x78, 0xb7, 0xf3, 0xf1, 0xcd, 0xcc, 0xb7, 0xbf, 0x5d, 0xb8, 0xd6, 0x46, 0x59, 0x15,
	0x1f, 0xee, 0x62, 0xb6, 0xca, 0x08, 0x49, 0x91, 0x13, 0x30, 0xe4, 0x7d, 0xf5, 0xe5, 0x18, 0x35,
	0xe2, 0xe1, 0x2e, 0x62, 0x32, 0x87, 0x32, 0xa7, 0xf1, 0x8d, 0x54, 0x4a, 0x6e, 0x28, 0x76, 0xbe,
	0xac, 0xfa, 0x10, 0xdb, 0x72, 0x4b, 0x6c, 0xc5, 0x56, 0x9f, 0x5a, 0xa7, 0xdf, 0x3c, 0x68, 0x2f,
	0x94, 0xc4, 0x17, 0xe0, 0xe7, 0xaa, 0xa0, 0xd0, 0x9b, 0x78, 0xb3, 0x51, 0xf2, 0x24, 0xba, 0x34,
	0x31, 0x5a, 0x59, 0x61, 0x2b, 0xbe, 0x57, 0x05, 0xa5, 0xae, 0x03, 0x27, 0x30, 0x2c, 0x88, 0x73,
	0x53, 0x6a, 0x5b, 0xaa, 0x5d, 0xd8, 0x9a, 0x78, 0xb3, 0x41, 0x7a, 0x2e, 0xe1, 0x73, 0xf0, 0xb7,
	0x64, 0x45, 0xd8, 0x9e, 0x78, 0xb3, 0x61, 0x32, 0xbd, 0x3c, 0x7b, 0x49, 0x56, 0xcc, 0x85, 0x15,
	0xa9, 0xf3, 0x4f, 0xbf, 0x7b, 0xd0, 0x6f, 0x24, 0x1c, 0x41, 0xab, 0x2c, 0x5c, 0xbc, 0x41, 0xda,
	0x2a, 0x0b, 0x1c, 0x43, 0x7f, 0xa3, 0x72, 0x71, 0xb6, 0xf3, 0x67, 0x8d, 0x08, 0xbe, 0x56, 0xc6,
	0xba, 0x85, 0x9d, 0xd4, 0x9d, 0x31, 0x02, 0xbf, 0xbe, 0x7b, 0xe8, 0xbb, 0x10, 0xe3, 0xe8, 0x04,
	0x26, 0x6a, 0xc0, 0x44, 0xeb, 0x06, 0x4c, 0xea, 0x7c, 0x98, 0x80, 0x6f, 0x8f, 0x9a, 0xc2, 0x8e,
	0x03, 0xf2, 0xf8, 0x72, 0xe8, 0xf5, 0x51, 0x53, 0xea, 0xbc, 0xd3, 0x4f, 0xf0, 0x70, 0x45, 0xbb,
	0x62, 0xa1, 0xe4, 0x92, 0x98, 0x85, 0xa4, 0x94, 0xf6, 0x15, 0xb1, 0xc5, 0x18, 0xda, 0x1b, 0x25,
	0x5d, 0xfa, 0x61, 0xf2, 0xe8, 0xf2, 0xac, 0x85, 0x92, 0x69, 0xed, 0xac, 0xa1, 0x72, 0xfe, 0x91,
	0x8a, 0x6a, 0x43, 0xe6, 0x4d, 0xd1, 0x40, 0x3d, 0x93, 0xa6, 0x09, 0x5c, 0xff, 0xb9, 0x8b, 0xb5,
	0xda, 0x31, 0x61, 0x08, 0x3d, 0xae, 0xf2, 0x9c, 0x98, 0xdd, 0xc2, 0x7e, 0xda, 0x94, 0xb7, 0x9f,
	0xc1, 0xaf, 0xd3, 0x62, 0x0f, 0xda, 0xeb, 0x5c, 0x07, 0x57, 0xd8, 0x07, 0xff, 0x95, 0xd1, 0x79,
	0xe0, 0xd5, 0xa7, 0xd7, 0xd6, 0xea, 0xa0, 0x85, 0x43, 0xe8, 0xad, 0x4a, 0x4b, 0x4b, 0xa1, 0x83,
	0x76, 0x5d, 0x2c, 0xd5, 0x4e, 0xaa, 0x79, 0x16, 0xf8, 0x38, 0x02, 0x78, 0xaf, 0xd8, 0x4a, 0x43,
	0x3c, 0xcf, 0x82, 0x0e, 0x3e, 0x80, 0xe1, 0xbd, 0x60, 0x16, 0xbb, 0xc2, 0x88, 0x79, 0x16, 0x74,
	0x9d, 0xfb, 0xc8, 0xfb, 0xcd, 0x3c, 0x0b, 0x7a, 0xb7, 0x37, 0x00, 0xbf, 0xfe, 0x0a, 0x76, 0xa1,
	0xf5, 0xee, 0x6d, 0x70, 0x85, 0x03, 0xe8, 0xbc, 0x34, 0x46, 0x99, 0xc0, 0x4b, 0xbe, 0x42, 0x77,
	0xa1, 0xa4, 0x24, 0x83, 0x0c, 0xa3, 0xdf, 0xef, 0x82, 0xf1, 0x3f, 0x3e, 0xe0, 0xdf, 0x08, 0x8f,
	0x9f, 0xfe, 0x7f, 0xc3, 0x09, 0x53, 0xd6, 0x75, 0x4f, 0xff, 0xec, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x48, 0xbb, 0x1b, 0xbc, 0x55, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	SendLogMessage(ctx context.Context, in *SendLogMessageRequest, opts ...grpc.CallOption) (*SendLogMessageResponse, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) SendLogMessage(ctx context.Context, in *SendLogMessageRequest, opts ...grpc.CallOption) (*SendLogMessageResponse, error) {
	out := new(SendLogMessageResponse)
	err := c.cc.Invoke(ctx, "/squzy.storage.v1.service.Logger/SendLogMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	SendLogMessage(context.Context, *SendLogMessageRequest) (*SendLogMessageResponse, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) SendLogMessage(ctx context.Context, req *SendLogMessageRequest) (*SendLogMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLogMessage not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_SendLogMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLogMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).SendLogMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.storage.v1.service.Logger/SendLogMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).SendLogMessage(ctx, req.(*SendLogMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.storage.v1.service.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLogMessage",
			Handler:    _Logger_SendLogMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/storage.proto",
}
