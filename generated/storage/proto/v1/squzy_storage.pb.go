// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/squzy_storage.proto

package squzy_v1_storage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SchedulerResponseCode int32

const (
	SchedulerResponseCode_OK    SchedulerResponseCode = 0
	SchedulerResponseCode_Error SchedulerResponseCode = 1
)

var SchedulerResponseCode_name = map[int32]string{
	0: "OK",
	1: "Error",
}

var SchedulerResponseCode_value = map[string]int32{
	"OK":    0,
	"Error": 1,
}

func (x SchedulerResponseCode) String() string {
	return proto.EnumName(SchedulerResponseCode_name, int32(x))
}

func (SchedulerResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c3bbf174c8621b4, []int{0}
}

type SchedulerResponse struct {
	SchedulerId          string                      `protobuf:"bytes,1,opt,name=schedulerId,proto3" json:"schedulerId,omitempty"`
	Code                 SchedulerResponseCode       `protobuf:"varint,2,opt,name=code,proto3,enum=squzy.v1.storage.SchedulerResponseCode" json:"code,omitempty"`
	Type                 SchedulerType               `protobuf:"varint,3,opt,name=type,proto3,enum=squzy.v1.monitoring.SchedulerType" json:"type,omitempty"`
	Error                *SchedulerResponse_Error    `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Meta                 *SchedulerResponse_MetaData `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SchedulerResponse) Reset()         { *m = SchedulerResponse{} }
func (m *SchedulerResponse) String() string { return proto.CompactTextString(m) }
func (*SchedulerResponse) ProtoMessage()    {}
func (*SchedulerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3bbf174c8621b4, []int{0}
}

func (m *SchedulerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerResponse.Unmarshal(m, b)
}
func (m *SchedulerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerResponse.Marshal(b, m, deterministic)
}
func (m *SchedulerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerResponse.Merge(m, src)
}
func (m *SchedulerResponse) XXX_Size() int {
	return xxx_messageInfo_SchedulerResponse.Size(m)
}
func (m *SchedulerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerResponse proto.InternalMessageInfo

func (m *SchedulerResponse) GetSchedulerId() string {
	if m != nil {
		return m.SchedulerId
	}
	return ""
}

func (m *SchedulerResponse) GetCode() SchedulerResponseCode {
	if m != nil {
		return m.Code
	}
	return SchedulerResponseCode_OK
}

func (m *SchedulerResponse) GetType() SchedulerType {
	if m != nil {
		return m.Type
	}
	return SchedulerType_Tcp
}

func (m *SchedulerResponse) GetError() *SchedulerResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SchedulerResponse) GetMeta() *SchedulerResponse_MetaData {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SchedulerResponse_Error struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulerResponse_Error) Reset()         { *m = SchedulerResponse_Error{} }
func (m *SchedulerResponse_Error) String() string { return proto.CompactTextString(m) }
func (*SchedulerResponse_Error) ProtoMessage()    {}
func (*SchedulerResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3bbf174c8621b4, []int{0, 0}
}

func (m *SchedulerResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerResponse_Error.Unmarshal(m, b)
}
func (m *SchedulerResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerResponse_Error.Marshal(b, m, deterministic)
}
func (m *SchedulerResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerResponse_Error.Merge(m, src)
}
func (m *SchedulerResponse_Error) XXX_Size() int {
	return xxx_messageInfo_SchedulerResponse_Error.Size(m)
}
func (m *SchedulerResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerResponse_Error proto.InternalMessageInfo

func (m *SchedulerResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SchedulerResponse_MetaData struct {
	StartTime            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Value                *_struct.Value       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SchedulerResponse_MetaData) Reset()         { *m = SchedulerResponse_MetaData{} }
func (m *SchedulerResponse_MetaData) String() string { return proto.CompactTextString(m) }
func (*SchedulerResponse_MetaData) ProtoMessage()    {}
func (*SchedulerResponse_MetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3bbf174c8621b4, []int{0, 1}
}

func (m *SchedulerResponse_MetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerResponse_MetaData.Unmarshal(m, b)
}
func (m *SchedulerResponse_MetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerResponse_MetaData.Marshal(b, m, deterministic)
}
func (m *SchedulerResponse_MetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerResponse_MetaData.Merge(m, src)
}
func (m *SchedulerResponse_MetaData) XXX_Size() int {
	return xxx_messageInfo_SchedulerResponse_MetaData.Size(m)
}
func (m *SchedulerResponse_MetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerResponse_MetaData.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerResponse_MetaData proto.InternalMessageInfo

func (m *SchedulerResponse_MetaData) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *SchedulerResponse_MetaData) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *SchedulerResponse_MetaData) GetValue() *_struct.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("squzy.v1.storage.SchedulerResponseCode", SchedulerResponseCode_name, SchedulerResponseCode_value)
	proto.RegisterType((*SchedulerResponse)(nil), "squzy.v1.storage.SchedulerResponse")
	proto.RegisterType((*SchedulerResponse_Error)(nil), "squzy.v1.storage.SchedulerResponse.Error")
	proto.RegisterType((*SchedulerResponse_MetaData)(nil), "squzy.v1.storage.SchedulerResponse.MetaData")
}

func init() { proto.RegisterFile("proto/v1/squzy_storage.proto", fileDescriptor_4c3bbf174c8621b4) }

var fileDescriptor_4c3bbf174c8621b4 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x51, 0x6b, 0x13, 0x41,
	0x10, 0xc7, 0xbd, 0x34, 0x69, 0xcc, 0x04, 0x24, 0x2e, 0x54, 0xce, 0xb3, 0xd0, 0xb4, 0x3e, 0x18,
	0x4b, 0xd9, 0xd0, 0x53, 0x44, 0xf0, 0x41, 0x45, 0x2b, 0x88, 0x14, 0x61, 0x13, 0xc4, 0xb7, 0xb2,
	0xcd, 0x8d, 0xe7, 0x41, 0xee, 0xf6, 0xba, 0x3b, 0x17, 0x38, 0x3f, 0x91, 0x1f, 0xc1, 0xef, 0xe6,
	0x8b, 0xdc, 0xee, 0x5d, 0x13, 0x2e, 0x8a, 0x79, 0xdc, 0x99, 0xff, 0x6f, 0x66, 0x67, 0xe6, 0x0f,
	0x87, 0xb9, 0x56, 0xa4, 0xa6, 0xab, 0xf3, 0xa9, 0xb9, 0x29, 0x7e, 0x94, 0x57, 0x86, 0x94, 0x96,
	0x31, 0x72, 0x1b, 0x66, 0x23, 0x1b, 0xe4, 0xab, 0x73, 0x5e, 0xc7, 0x83, 0xa3, 0x58, 0xa9, 0x78,
	0x89, 0x53, 0x9b, 0xbf, 0x2e, 0xbe, 0x4d, 0x29, 0x49, 0xd1, 0x90, 0x4c, 0x73, 0x87, 0x04, 0x87,
	0x6d, 0x81, 0x21, 0x5d, 0x2c, 0xa8, 0xce, 0x1e, 0xb5, 0xda, 0xa5, 0x2a, 0x4b, 0x48, 0xe9, 0x24,
	0x8b, 0x6b, 0xc1, 0x71, 0x4b, 0x20, 0x63, 0xcc, 0xe8, 0xca, 0xa0, 0x5e, 0xa1, 0xae, 0x25, 0x8f,
	0xda, 0x1d, 0x30, 0xcd, 0xa9, 0x74, 0xc9, 0x93, 0xdf, 0x7b, 0x70, 0x7f, 0xb6, 0xf8, 0x8e, 0x51,
	0xb1, 0x44, 0x2d, 0xd0, 0xe4, 0x2a, 0x33, 0xc8, 0xc6, 0x30, 0x34, 0x4d, 0xf0, 0x63, 0xe4, 0x7b,
	0x63, 0x6f, 0x32, 0x10, 0x9b, 0x21, 0xf6, 0x0a, 0xba, 0x0b, 0x15, 0xa1, 0xdf, 0x19, 0x7b, 0x93,
	0x7b, 0xe1, 0x13, 0xde, 0x1e, 0x9c, 0x6f, 0x15, 0x7d, 0xa7, 0x22, 0x14, 0x16, 0x62, 0x2f, 0xa0,
	0x4b, 0x65, 0x8e, 0xfe, 0x9e, 0x85, 0x4f, 0xd6, 0xf0, 0xc6, 0x78, 0xb7, 0xfc, 0xbc, 0xcc, 0x51,
	0x58, 0x3d, 0x7b, 0x0d, 0x3d, 0xd4, 0x5a, 0x69, 0xbf, 0x3b, 0xf6, 0x26, 0xc3, 0xf0, 0xe9, 0x0e,
	0x5d, 0xf9, 0x45, 0x05, 0x08, 0xc7, 0xb1, 0x37, 0xd0, 0x4d, 0x91, 0xa4, 0xdf, 0xb3, 0xfc, 0xd9,
	0x2e, 0xfc, 0x25, 0x92, 0x7c, 0x2f, 0x49, 0x0a, 0x4b, 0x06, 0xc7, 0xd0, 0xb3, 0x15, 0x99, 0x0f,
	0xfd, 0x14, 0x8d, 0x91, 0x31, 0xd6, 0xeb, 0x69, 0x9e, 0xc1, 0x4f, 0x0f, 0xee, 0x36, 0x14, 0x7b,
	0x09, 0x03, 0x43, 0x52, 0xd3, 0x3c, 0x49, 0x9d, 0x70, 0x18, 0x06, 0xdc, 0x1d, 0x84, 0x37, 0x07,
	0xe1, 0xf3, 0xc6, 0x13, 0x62, 0x2d, 0x66, 0xcf, 0xa1, 0x8f, 0x59, 0x64, 0xb9, 0xce, 0x7f, 0xb9,
	0x46, 0xca, 0xce, 0xa0, 0xb7, 0x92, 0xcb, 0xc2, 0xed, 0x76, 0x18, 0x3e, 0xd8, 0x62, 0xbe, 0x54,
	0x59, 0xe1, 0x44, 0xa7, 0xa7, 0x70, 0xf0, 0xd7, 0x3b, 0xb1, 0x7d, 0xe8, 0x7c, 0xfe, 0x34, 0xba,
	0xc3, 0x06, 0xf5, 0xb8, 0x23, 0x2f, 0xfc, 0xe5, 0x41, 0x7f, 0xe6, 0xd6, 0xc4, 0xbe, 0xc2, 0xc3,
	0x19, 0x66, 0x51, 0x83, 0x7c, 0xd0, 0x2a, 0xbd, 0xad, 0xc3, 0x1e, 0xef, 0xb0, 0xd6, 0x60, 0xfb,
	0x63, 0x17, 0x95, 0x2b, 0xd9, 0x0c, 0x0e, 0xda, 0x95, 0xdf, 0x56, 0x96, 0x66, 0x1b, 0x2e, 0xb1,
	0x1e, 0xe7, 0x95, 0xec, 0x12, 0x49, 0x27, 0x0b, 0x23, 0xf0, 0xa6, 0x40, 0x43, 0xff, 0x2a, 0x7a,
	0xbd, 0x6f, 0xdf, 0xcf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x55, 0x82, 0x2f, 0xbd, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	SendResponseFromScheduler(ctx context.Context, in *SchedulerResponse, opts ...grpc.CallOption) (*empty.Empty, error)
	SendResponseFromAgent(ctx context.Context, in *SendMetricsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) SendResponseFromScheduler(ctx context.Context, in *SchedulerResponse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/SendResponseFromScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SendResponseFromAgent(ctx context.Context, in *SendMetricsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.storage.Storage/SendResponseFromAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	SendResponseFromScheduler(context.Context, *SchedulerResponse) (*empty.Empty, error)
	SendResponseFromAgent(context.Context, *SendMetricsRequest) (*empty.Empty, error)
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) SendResponseFromScheduler(ctx context.Context, req *SchedulerResponse) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResponseFromScheduler not implemented")
}
func (*UnimplementedStorageServer) SendResponseFromAgent(ctx context.Context, req *SendMetricsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResponseFromAgent not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_SendResponseFromScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SendResponseFromScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/SendResponseFromScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SendResponseFromScheduler(ctx, req.(*SchedulerResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SendResponseFromAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SendResponseFromAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.storage.Storage/SendResponseFromAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SendResponseFromAgent(ctx, req.(*SendMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.v1.storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendResponseFromScheduler",
			Handler:    _Storage_SendResponseFromScheduler_Handler,
		},
		{
			MethodName: "SendResponseFromAgent",
			Handler:    _Storage_SendResponseFromAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/squzy_storage.proto",
}
