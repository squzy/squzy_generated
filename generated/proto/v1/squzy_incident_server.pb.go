// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/squzy_incident_server.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IncidentStatus int32

const (
	IncidentStatus_INCIDENT_STATUS_UNSPECIFIED   IncidentStatus = 0
	IncidentStatus_INCIDENT_STATUS_OPENED        IncidentStatus = 1
	IncidentStatus_INCIDENT_STATUS_STUDIED       IncidentStatus = 2
	IncidentStatus_INCIDENT_STATUS_CAN_BE_CLOSED IncidentStatus = 4
	IncidentStatus_INCIDENT_STATUS_CLOSED        IncidentStatus = 5
)

var IncidentStatus_name = map[int32]string{
	0: "INCIDENT_STATUS_UNSPECIFIED",
	1: "INCIDENT_STATUS_OPENED",
	2: "INCIDENT_STATUS_STUDIED",
	4: "INCIDENT_STATUS_CAN_BE_CLOSED",
	5: "INCIDENT_STATUS_CLOSED",
}

var IncidentStatus_value = map[string]int32{
	"INCIDENT_STATUS_UNSPECIFIED":   0,
	"INCIDENT_STATUS_OPENED":        1,
	"INCIDENT_STATUS_STUDIED":       2,
	"INCIDENT_STATUS_CAN_BE_CLOSED": 4,
	"INCIDENT_STATUS_CLOSED":        5,
}

func (x IncidentStatus) String() string {
	return proto.EnumName(IncidentStatus_name, int32(x))
}

func (IncidentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{0}
}

type Incident struct {
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               IncidentStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=squzy.v1.incident.IncidentStatus" json:"status,omitempty"`
	RuleId               string                  `protobuf:"bytes,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Histories            []*Incident_HistoryItem `protobuf:"bytes,4,rep,name=histories,proto3" json:"histories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Incident) Reset()         { *m = Incident{} }
func (m *Incident) String() string { return proto.CompactTextString(m) }
func (*Incident) ProtoMessage()    {}
func (*Incident) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{0}
}

func (m *Incident) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Incident.Unmarshal(m, b)
}
func (m *Incident) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Incident.Marshal(b, m, deterministic)
}
func (m *Incident) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Incident.Merge(m, src)
}
func (m *Incident) XXX_Size() int {
	return xxx_messageInfo_Incident.Size(m)
}
func (m *Incident) XXX_DiscardUnknown() {
	xxx_messageInfo_Incident.DiscardUnknown(m)
}

var xxx_messageInfo_Incident proto.InternalMessageInfo

func (m *Incident) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Incident) GetStatus() IncidentStatus {
	if m != nil {
		return m.Status
	}
	return IncidentStatus_INCIDENT_STATUS_UNSPECIFIED
}

func (m *Incident) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *Incident) GetHistories() []*Incident_HistoryItem {
	if m != nil {
		return m.Histories
	}
	return nil
}

type Incident_HistoryItem struct {
	Status               IncidentStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=squzy.v1.incident.IncidentStatus" json:"status,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Incident_HistoryItem) Reset()         { *m = Incident_HistoryItem{} }
func (m *Incident_HistoryItem) String() string { return proto.CompactTextString(m) }
func (*Incident_HistoryItem) ProtoMessage()    {}
func (*Incident_HistoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{0, 0}
}

func (m *Incident_HistoryItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Incident_HistoryItem.Unmarshal(m, b)
}
func (m *Incident_HistoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Incident_HistoryItem.Marshal(b, m, deterministic)
}
func (m *Incident_HistoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Incident_HistoryItem.Merge(m, src)
}
func (m *Incident_HistoryItem) XXX_Size() int {
	return xxx_messageInfo_Incident_HistoryItem.Size(m)
}
func (m *Incident_HistoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_Incident_HistoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_Incident_HistoryItem proto.InternalMessageInfo

func (m *Incident_HistoryItem) GetStatus() IncidentStatus {
	if m != nil {
		return m.Status
	}
	return IncidentStatus_INCIDENT_STATUS_UNSPECIFIED
}

func (m *Incident_HistoryItem) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type IncidentIdRequest struct {
	IncidentId           string   `protobuf:"bytes,1,opt,name=incident_id,json=incidentId,proto3" json:"incident_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncidentIdRequest) Reset()         { *m = IncidentIdRequest{} }
func (m *IncidentIdRequest) String() string { return proto.CompactTextString(m) }
func (*IncidentIdRequest) ProtoMessage()    {}
func (*IncidentIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{1}
}

func (m *IncidentIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncidentIdRequest.Unmarshal(m, b)
}
func (m *IncidentIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncidentIdRequest.Marshal(b, m, deterministic)
}
func (m *IncidentIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncidentIdRequest.Merge(m, src)
}
func (m *IncidentIdRequest) XXX_Size() int {
	return xxx_messageInfo_IncidentIdRequest.Size(m)
}
func (m *IncidentIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncidentIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncidentIdRequest proto.InternalMessageInfo

func (m *IncidentIdRequest) GetIncidentId() string {
	if m != nil {
		return m.IncidentId
	}
	return ""
}

type StorageRecord struct {
	// Types that are valid to be assigned to Record:
	//	*StorageRecord_Agent
	//	*StorageRecord_Transaction
	//	*StorageRecord_SchedulerSnapshot
	Record               isStorageRecord_Record `protobuf_oneof:"record"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StorageRecord) Reset()         { *m = StorageRecord{} }
func (m *StorageRecord) String() string { return proto.CompactTextString(m) }
func (*StorageRecord) ProtoMessage()    {}
func (*StorageRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{2}
}

func (m *StorageRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRecord.Unmarshal(m, b)
}
func (m *StorageRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRecord.Marshal(b, m, deterministic)
}
func (m *StorageRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRecord.Merge(m, src)
}
func (m *StorageRecord) XXX_Size() int {
	return xxx_messageInfo_StorageRecord.Size(m)
}
func (m *StorageRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRecord proto.InternalMessageInfo

type isStorageRecord_Record interface {
	isStorageRecord_Record()
}

type StorageRecord_Agent struct {
	Agent *Metric `protobuf:"bytes,1,opt,name=agent,proto3,oneof"`
}

type StorageRecord_Transaction struct {
	Transaction *TransactionInfo `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

type StorageRecord_SchedulerSnapshot struct {
	SchedulerSnapshot *SchedulerSnapshot `protobuf:"bytes,3,opt,name=scheduler_snapshot,json=schedulerSnapshot,proto3,oneof"`
}

func (*StorageRecord_Agent) isStorageRecord_Record() {}

func (*StorageRecord_Transaction) isStorageRecord_Record() {}

func (*StorageRecord_SchedulerSnapshot) isStorageRecord_Record() {}

func (m *StorageRecord) GetRecord() isStorageRecord_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *StorageRecord) GetAgent() *Metric {
	if x, ok := m.GetRecord().(*StorageRecord_Agent); ok {
		return x.Agent
	}
	return nil
}

func (m *StorageRecord) GetTransaction() *TransactionInfo {
	if x, ok := m.GetRecord().(*StorageRecord_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *StorageRecord) GetSchedulerSnapshot() *SchedulerSnapshot {
	if x, ok := m.GetRecord().(*StorageRecord_SchedulerSnapshot); ok {
		return x.SchedulerSnapshot
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StorageRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StorageRecord_Agent)(nil),
		(*StorageRecord_Transaction)(nil),
		(*StorageRecord_SchedulerSnapshot)(nil),
	}
}

type RuleIdRequest struct {
	RuleId               string   `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleIdRequest) Reset()         { *m = RuleIdRequest{} }
func (m *RuleIdRequest) String() string { return proto.CompactTextString(m) }
func (*RuleIdRequest) ProtoMessage()    {}
func (*RuleIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{3}
}

func (m *RuleIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleIdRequest.Unmarshal(m, b)
}
func (m *RuleIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleIdRequest.Marshal(b, m, deterministic)
}
func (m *RuleIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleIdRequest.Merge(m, src)
}
func (m *RuleIdRequest) XXX_Size() int {
	return xxx_messageInfo_RuleIdRequest.Size(m)
}
func (m *RuleIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleIdRequest proto.InternalMessageInfo

func (m *RuleIdRequest) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

type CreateRuleRequest struct {
	Rule      string `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AutoClose bool   `protobuf:"varint,3,opt,name=auto_close,json=autoClose,proto3" json:"auto_close,omitempty"`
	// Types that are valid to be assigned to Owner:
	//	*CreateRuleRequest_SchedulerId
	//	*CreateRuleRequest_AgentId
	//	*CreateRuleRequest_ApplicationId
	Owner                isCreateRuleRequest_Owner `protobuf_oneof:"owner"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CreateRuleRequest) Reset()         { *m = CreateRuleRequest{} }
func (m *CreateRuleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRuleRequest) ProtoMessage()    {}
func (*CreateRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{4}
}

func (m *CreateRuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRuleRequest.Unmarshal(m, b)
}
func (m *CreateRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRuleRequest.Marshal(b, m, deterministic)
}
func (m *CreateRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRuleRequest.Merge(m, src)
}
func (m *CreateRuleRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRuleRequest.Size(m)
}
func (m *CreateRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRuleRequest proto.InternalMessageInfo

func (m *CreateRuleRequest) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *CreateRuleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRuleRequest) GetAutoClose() bool {
	if m != nil {
		return m.AutoClose
	}
	return false
}

type isCreateRuleRequest_Owner interface {
	isCreateRuleRequest_Owner()
}

type CreateRuleRequest_SchedulerId struct {
	SchedulerId string `protobuf:"bytes,4,opt,name=scheduler_id,json=schedulerId,proto3,oneof"`
}

type CreateRuleRequest_AgentId struct {
	AgentId string `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3,oneof"`
}

type CreateRuleRequest_ApplicationId struct {
	ApplicationId string `protobuf:"bytes,6,opt,name=application_id,json=applicationId,proto3,oneof"`
}

func (*CreateRuleRequest_SchedulerId) isCreateRuleRequest_Owner() {}

func (*CreateRuleRequest_AgentId) isCreateRuleRequest_Owner() {}

func (*CreateRuleRequest_ApplicationId) isCreateRuleRequest_Owner() {}

func (m *CreateRuleRequest) GetOwner() isCreateRuleRequest_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *CreateRuleRequest) GetSchedulerId() string {
	if x, ok := m.GetOwner().(*CreateRuleRequest_SchedulerId); ok {
		return x.SchedulerId
	}
	return ""
}

func (m *CreateRuleRequest) GetAgentId() string {
	if x, ok := m.GetOwner().(*CreateRuleRequest_AgentId); ok {
		return x.AgentId
	}
	return ""
}

func (m *CreateRuleRequest) GetApplicationId() string {
	if x, ok := m.GetOwner().(*CreateRuleRequest_ApplicationId); ok {
		return x.ApplicationId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateRuleRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateRuleRequest_SchedulerId)(nil),
		(*CreateRuleRequest_AgentId)(nil),
		(*CreateRuleRequest_ApplicationId)(nil),
	}
}

type GetRulesByOwnerIdRequest struct {
	// Types that are valid to be assigned to Owner:
	//	*GetRulesByOwnerIdRequest_SchedulerId
	//	*GetRulesByOwnerIdRequest_AgentId
	//	*GetRulesByOwnerIdRequest_ApplicationId
	Owner                isGetRulesByOwnerIdRequest_Owner `protobuf_oneof:"owner"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetRulesByOwnerIdRequest) Reset()         { *m = GetRulesByOwnerIdRequest{} }
func (m *GetRulesByOwnerIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetRulesByOwnerIdRequest) ProtoMessage()    {}
func (*GetRulesByOwnerIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{5}
}

func (m *GetRulesByOwnerIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRulesByOwnerIdRequest.Unmarshal(m, b)
}
func (m *GetRulesByOwnerIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRulesByOwnerIdRequest.Marshal(b, m, deterministic)
}
func (m *GetRulesByOwnerIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRulesByOwnerIdRequest.Merge(m, src)
}
func (m *GetRulesByOwnerIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetRulesByOwnerIdRequest.Size(m)
}
func (m *GetRulesByOwnerIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRulesByOwnerIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRulesByOwnerIdRequest proto.InternalMessageInfo

type isGetRulesByOwnerIdRequest_Owner interface {
	isGetRulesByOwnerIdRequest_Owner()
}

type GetRulesByOwnerIdRequest_SchedulerId struct {
	SchedulerId string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3,oneof"`
}

type GetRulesByOwnerIdRequest_AgentId struct {
	AgentId string `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3,oneof"`
}

type GetRulesByOwnerIdRequest_ApplicationId struct {
	ApplicationId string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3,oneof"`
}

func (*GetRulesByOwnerIdRequest_SchedulerId) isGetRulesByOwnerIdRequest_Owner() {}

func (*GetRulesByOwnerIdRequest_AgentId) isGetRulesByOwnerIdRequest_Owner() {}

func (*GetRulesByOwnerIdRequest_ApplicationId) isGetRulesByOwnerIdRequest_Owner() {}

func (m *GetRulesByOwnerIdRequest) GetOwner() isGetRulesByOwnerIdRequest_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetRulesByOwnerIdRequest) GetSchedulerId() string {
	if x, ok := m.GetOwner().(*GetRulesByOwnerIdRequest_SchedulerId); ok {
		return x.SchedulerId
	}
	return ""
}

func (m *GetRulesByOwnerIdRequest) GetAgentId() string {
	if x, ok := m.GetOwner().(*GetRulesByOwnerIdRequest_AgentId); ok {
		return x.AgentId
	}
	return ""
}

func (m *GetRulesByOwnerIdRequest) GetApplicationId() string {
	if x, ok := m.GetOwner().(*GetRulesByOwnerIdRequest_ApplicationId); ok {
		return x.ApplicationId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetRulesByOwnerIdRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetRulesByOwnerIdRequest_SchedulerId)(nil),
		(*GetRulesByOwnerIdRequest_AgentId)(nil),
		(*GetRulesByOwnerIdRequest_ApplicationId)(nil),
	}
}

type Rule struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rule      string `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AutoClose bool   `protobuf:"varint,4,opt,name=auto_close,json=autoClose,proto3" json:"auto_close,omitempty"`
	// Types that are valid to be assigned to Parent:
	//	*Rule_SchedulerId
	//	*Rule_AgentId
	//	*Rule_ApplicationId
	Parent               isRule_Parent `protobuf_oneof:"parent"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{6}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rule) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Rule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rule) GetAutoClose() bool {
	if m != nil {
		return m.AutoClose
	}
	return false
}

type isRule_Parent interface {
	isRule_Parent()
}

type Rule_SchedulerId struct {
	SchedulerId string `protobuf:"bytes,5,opt,name=scheduler_id,json=schedulerId,proto3,oneof"`
}

type Rule_AgentId struct {
	AgentId string `protobuf:"bytes,6,opt,name=agent_id,json=agentId,proto3,oneof"`
}

type Rule_ApplicationId struct {
	ApplicationId string `protobuf:"bytes,7,opt,name=application_id,json=applicationId,proto3,oneof"`
}

func (*Rule_SchedulerId) isRule_Parent() {}

func (*Rule_AgentId) isRule_Parent() {}

func (*Rule_ApplicationId) isRule_Parent() {}

func (m *Rule) GetParent() isRule_Parent {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Rule) GetSchedulerId() string {
	if x, ok := m.GetParent().(*Rule_SchedulerId); ok {
		return x.SchedulerId
	}
	return ""
}

func (m *Rule) GetAgentId() string {
	if x, ok := m.GetParent().(*Rule_AgentId); ok {
		return x.AgentId
	}
	return ""
}

func (m *Rule) GetApplicationId() string {
	if x, ok := m.GetParent().(*Rule_ApplicationId); ok {
		return x.ApplicationId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Rule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Rule_SchedulerId)(nil),
		(*Rule_AgentId)(nil),
		(*Rule_ApplicationId)(nil),
	}
}

type Rules struct {
	Rules                []*Rule  `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rules) Reset()         { *m = Rules{} }
func (m *Rules) String() string { return proto.CompactTextString(m) }
func (*Rules) ProtoMessage()    {}
func (*Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_78f0380f235b443b, []int{7}
}

func (m *Rules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rules.Unmarshal(m, b)
}
func (m *Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rules.Marshal(b, m, deterministic)
}
func (m *Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rules.Merge(m, src)
}
func (m *Rules) XXX_Size() int {
	return xxx_messageInfo_Rules.Size(m)
}
func (m *Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_Rules.DiscardUnknown(m)
}

var xxx_messageInfo_Rules proto.InternalMessageInfo

func (m *Rules) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterEnum("squzy.v1.incident.IncidentStatus", IncidentStatus_name, IncidentStatus_value)
	proto.RegisterType((*Incident)(nil), "squzy.v1.incident.Incident")
	proto.RegisterType((*Incident_HistoryItem)(nil), "squzy.v1.incident.Incident.HistoryItem")
	proto.RegisterType((*IncidentIdRequest)(nil), "squzy.v1.incident.IncidentIdRequest")
	proto.RegisterType((*StorageRecord)(nil), "squzy.v1.incident.StorageRecord")
	proto.RegisterType((*RuleIdRequest)(nil), "squzy.v1.incident.RuleIdRequest")
	proto.RegisterType((*CreateRuleRequest)(nil), "squzy.v1.incident.CreateRuleRequest")
	proto.RegisterType((*GetRulesByOwnerIdRequest)(nil), "squzy.v1.incident.GetRulesByOwnerIdRequest")
	proto.RegisterType((*Rule)(nil), "squzy.v1.incident.Rule")
	proto.RegisterType((*Rules)(nil), "squzy.v1.incident.Rules")
}

func init() {
	proto.RegisterFile("proto/v1/squzy_incident_server.proto", fileDescriptor_78f0380f235b443b)
}

var fileDescriptor_78f0380f235b443b = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0x8e, 0x09, 0x10, 0x38, 0x34, 0x51, 0x98, 0x8b, 0xc4, 0x32, 0x5a, 0x25, 0xa1, 0x51, 0x37,
	0xea, 0xaa, 0x8e, 0x96, 0x56, 0x55, 0x7b, 0xb9, 0x80, 0x77, 0xb1, 0xda, 0x92, 0xc8, 0x26, 0xaa,
	0xd4, 0x1b, 0xcb, 0xcb, 0xcc, 0x92, 0x91, 0xc0, 0xc3, 0xce, 0x0c, 0x54, 0xf4, 0xb2, 0x0f, 0xd0,
	0xf7, 0xe8, 0x2b, 0xf4, 0x11, 0x7a, 0xd1, 0x8b, 0x3e, 0x47, 0x1f, 0xa2, 0x9a, 0xc1, 0xc6, 0x5e,
	0x63, 0x82, 0xaa, 0xee, 0x1d, 0x9c, 0xf3, 0x9d, 0xe3, 0xef, 0x3b, 0x7f, 0x03, 0xd7, 0x73, 0xce,
	0x24, 0xbb, 0x5d, 0xbe, 0xbc, 0x15, 0xef, 0x17, 0xbf, 0xac, 0x02, 0x1a, 0x8d, 0x29, 0x26, 0x91,
	0x0c, 0x04, 0xe1, 0x4b, 0xc2, 0x6d, 0xed, 0x46, 0x4d, 0xed, 0xb4, 0x97, 0x2f, 0xed, 0xc4, 0x6f,
	0xb5, 0x26, 0x8c, 0x4d, 0xa6, 0xe4, 0x56, 0x03, 0xde, 0x2e, 0xde, 0xdd, 0x92, 0xd9, 0x5c, 0xae,
	0xd6, 0x78, 0xeb, 0x22, 0xef, 0x94, 0x74, 0x46, 0x84, 0x0c, 0x67, 0xf3, 0x18, 0x70, 0x95, 0xfb,
	0x6c, 0x38, 0xc9, 0x7f, 0xd3, 0x7a, 0x91, 0x87, 0xcc, 0xe7, 0x53, 0x3a, 0x0e, 0x25, 0x65, 0x51,
	0x30, 0x63, 0x11, 0x95, 0x8c, 0xd3, 0x68, 0x92, 0x7c, 0x30, 0x07, 0xce, 0x03, 0xda, 0x7f, 0x94,
	0xa0, 0xe6, 0xc6, 0xdc, 0xd1, 0x09, 0x94, 0x28, 0x36, 0x8d, 0x4b, 0xe3, 0xa6, 0xee, 0x95, 0x28,
	0x46, 0xdf, 0x42, 0x55, 0xc8, 0x50, 0x2e, 0x84, 0x59, 0xba, 0x34, 0x6e, 0x4e, 0x3a, 0x57, 0xf6,
	0x96, 0x5e, 0x3b, 0x09, 0xf6, 0x35, 0xd0, 0x8b, 0x03, 0xd0, 0x39, 0x1c, 0xf1, 0xc5, 0x94, 0x04,
	0x14, 0x9b, 0x87, 0x3a, 0x5f, 0x55, 0xfd, 0x75, 0x31, 0x72, 0xa0, 0xfe, 0x48, 0x85, 0xe2, 0x40,
	0x84, 0x59, 0xbe, 0x3c, 0xbc, 0x69, 0x74, 0x9e, 0x3f, 0x91, 0xd6, 0x1e, 0x68, 0xf0, 0xca, 0x95,
	0x64, 0xe6, 0xa5, 0x91, 0xd6, 0xaf, 0x06, 0x34, 0x32, 0xae, 0x0c, 0x55, 0xe3, 0xbf, 0x52, 0xfd,
	0x06, 0xea, 0x9b, 0x36, 0x68, 0xa1, 0x8d, 0x8e, 0x65, 0xaf, 0x1b, 0x65, 0x27, 0x8d, 0xb2, 0x47,
	0x09, 0xc2, 0x4b, 0xc1, 0xed, 0xaf, 0xa0, 0x99, 0xe4, 0x74, 0xb1, 0x47, 0xde, 0x2f, 0x88, 0x90,
	0xe8, 0x02, 0x1a, 0x9b, 0x61, 0xd9, 0x54, 0x13, 0xe8, 0x06, 0xd7, 0xfe, 0xc7, 0x80, 0x63, 0x5f,
	0x32, 0x1e, 0x4e, 0x88, 0x47, 0xc6, 0x8c, 0x63, 0x64, 0x43, 0x45, 0x37, 0x5a, 0x83, 0x1b, 0x9d,
	0xb3, 0x94, 0xbb, 0x36, 0xdb, 0x3f, 0x10, 0xc9, 0xe9, 0x78, 0x70, 0xe0, 0xad, 0x61, 0x68, 0x00,
	0x0d, 0xc9, 0xc3, 0x48, 0x84, 0x63, 0xd5, 0xf5, 0x98, 0xf3, 0x75, 0x1a, 0x95, 0xe9, 0xf2, 0x28,
	0xc5, 0xb9, 0xd1, 0x3b, 0x36, 0x38, 0xf0, 0xb2, 0xa1, 0xe8, 0x47, 0x40, 0x62, 0xfc, 0x48, 0xf0,
	0x62, 0x4a, 0x78, 0x20, 0xa2, 0x70, 0x2e, 0x1e, 0x99, 0xd4, 0x1d, 0x6b, 0x74, 0x3e, 0x2b, 0x4c,
	0xe8, 0x27, 0x70, 0x3f, 0x46, 0x0f, 0x0e, 0xbc, 0xa6, 0xc8, 0x1b, 0xbb, 0x35, 0xa8, 0x72, 0x2d,
	0xae, 0x7d, 0x03, 0xc7, 0x9e, 0x6e, 0x7d, 0x52, 0xa0, 0xcc, 0x68, 0x18, 0xd9, 0xd1, 0x68, 0xff,
	0x65, 0x40, 0xb3, 0xc7, 0x49, 0x28, 0x89, 0x0a, 0x48, 0xe0, 0x08, 0xca, 0xca, 0x1f, 0x63, 0xf5,
	0x6f, 0x65, 0x8b, 0xc2, 0x19, 0xd1, 0xca, 0xeb, 0x9e, 0xfe, 0x8d, 0x9e, 0x01, 0x84, 0x0b, 0xc9,
	0x82, 0xf1, 0x94, 0x09, 0xa2, 0x25, 0xd4, 0xbc, 0xba, 0xb2, 0xf4, 0x94, 0x01, 0x7d, 0x0a, 0x9f,
	0xa4, 0x4a, 0x29, 0x36, 0xcb, 0x2a, 0x54, 0x95, 0x63, 0x63, 0x75, 0x31, 0x6a, 0x41, 0x6d, 0xbd,
	0x71, 0x14, 0x9b, 0x95, 0x18, 0x70, 0xa4, 0x2d, 0x2e, 0x46, 0xcf, 0xe1, 0x24, 0xbb, 0x6b, 0x14,
	0x9b, 0xd5, 0x18, 0x72, 0x9c, 0xb1, 0xbb, 0xb8, 0x7b, 0x04, 0x15, 0xf6, 0x73, 0x44, 0x78, 0xfb,
	0x37, 0x03, 0xcc, 0x37, 0x44, 0x2a, 0x35, 0xa2, 0xbb, 0xba, 0x53, 0xb6, 0xb4, 0x0c, 0x79, 0x42,
	0xc6, 0x3e, 0x42, 0xa5, 0xfd, 0x84, 0x0e, 0xf7, 0x10, 0xfa, 0xdb, 0x80, 0xb2, 0x62, 0xb3, 0xb5,
	0xe9, 0x49, 0x91, 0x4b, 0x05, 0x45, 0x3e, 0xdc, 0x59, 0xe4, 0xf2, 0xbe, 0x22, 0x57, 0xf6, 0x69,
	0xaa, 0xee, 0xd7, 0x74, 0x54, 0xac, 0xa9, 0x06, 0xd5, 0x79, 0xc8, 0x49, 0x24, 0xdb, 0x5f, 0x43,
	0x45, 0x57, 0x18, 0x7d, 0x01, 0x15, 0x45, 0x5c, 0x9d, 0x00, 0x75, 0x56, 0xce, 0x0b, 0x4e, 0x80,
	0x1e, 0xac, 0x35, 0xea, 0xf3, 0xdf, 0x0d, 0x38, 0xf9, 0xf0, 0x24, 0xa0, 0x0b, 0x68, 0xb9, 0xc3,
	0x9e, 0xdb, 0x77, 0x86, 0xa3, 0xc0, 0x1f, 0xbd, 0x1a, 0x3d, 0xf8, 0xc1, 0xc3, 0xd0, 0xbf, 0x77,
	0x7a, 0xee, 0x6b, 0xd7, 0xe9, 0x9f, 0x1e, 0x20, 0x0b, 0xce, 0xf2, 0x80, 0xbb, 0x7b, 0x67, 0xe8,
	0xf4, 0x4f, 0x0d, 0xd4, 0x82, 0xf3, 0xbc, 0xcf, 0x1f, 0x3d, 0xf4, 0x55, 0x60, 0x09, 0x5d, 0xc1,
	0xb3, 0xbc, 0xb3, 0xf7, 0x6a, 0x18, 0x74, 0x9d, 0xa0, 0xf7, 0xfd, 0x9d, 0xef, 0xf4, 0x4f, 0xcb,
	0x45, 0xb9, 0x63, 0x5f, 0xa5, 0xf3, 0x67, 0x39, 0xc3, 0x55, 0xbf, 0x06, 0xe8, 0x3b, 0x80, 0x74,
	0x59, 0xd0, 0x75, 0x81, 0xd8, 0xad, 0x5d, 0xb2, 0x76, 0x95, 0x44, 0x5d, 0x94, 0x78, 0x50, 0xbb,
	0x2b, 0x17, 0xa3, 0xcb, 0x1d, 0xb8, 0xcd, 0xf4, 0xee, 0xce, 0xf4, 0x13, 0x34, 0xb7, 0x46, 0x1e,
	0xbd, 0x28, 0x40, 0xef, 0x5a, 0x0c, 0xcb, 0xdc, 0x91, 0x5a, 0xa0, 0x37, 0x00, 0x1e, 0x99, 0xb1,
	0xe5, 0x5a, 0xf2, 0xff, 0x20, 0x39, 0x02, 0xf3, 0x9e, 0xb3, 0x31, 0x11, 0x62, 0x7d, 0x81, 0x5f,
	0x73, 0x36, 0x8b, 0x4f, 0x72, 0x61, 0xda, 0x0f, 0xce, 0xb5, 0x75, 0xb6, 0xf5, 0x3a, 0x38, 0xea,
	0x8d, 0x47, 0x1e, 0x1c, 0xeb, 0x35, 0xd8, 0xbc, 0xa7, 0xd7, 0x4f, 0x3c, 0x42, 0x29, 0xcb, 0xd6,
	0x13, 0x28, 0x95, 0xd3, 0x97, 0x0b, 0xbc, 0xfa, 0x88, 0x39, 0xdf, 0x56, 0x35, 0xef, 0x2f, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xca, 0x5d, 0x55, 0xe4, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IncidentServerClient is the client API for IncidentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IncidentServerClient interface {
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	GetRuleById(ctx context.Context, in *RuleIdRequest, opts ...grpc.CallOption) (*Rule, error)
	GetRulesByOwnerId(ctx context.Context, in *GetRulesByOwnerIdRequest, opts ...grpc.CallOption) (*Rules, error)
	RemoveRule(ctx context.Context, in *RuleIdRequest, opts ...grpc.CallOption) (*Rule, error)
	ProcessRecordFromStorage(ctx context.Context, in *StorageRecord, opts ...grpc.CallOption) (*empty.Empty, error)
	CloseIncident(ctx context.Context, in *IncidentIdRequest, opts ...grpc.CallOption) (*Incident, error)
	StudyIncident(ctx context.Context, in *IncidentIdRequest, opts ...grpc.CallOption) (*Incident, error)
}

type incidentServerClient struct {
	cc *grpc.ClientConn
}

func NewIncidentServerClient(cc *grpc.ClientConn) IncidentServerClient {
	return &incidentServerClient{cc}
}

func (c *incidentServerClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServerClient) GetRuleById(ctx context.Context, in *RuleIdRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/GetRuleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServerClient) GetRulesByOwnerId(ctx context.Context, in *GetRulesByOwnerIdRequest, opts ...grpc.CallOption) (*Rules, error) {
	out := new(Rules)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/GetRulesByOwnerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServerClient) RemoveRule(ctx context.Context, in *RuleIdRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/RemoveRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServerClient) ProcessRecordFromStorage(ctx context.Context, in *StorageRecord, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/ProcessRecordFromStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServerClient) CloseIncident(ctx context.Context, in *IncidentIdRequest, opts ...grpc.CallOption) (*Incident, error) {
	out := new(Incident)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/CloseIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServerClient) StudyIncident(ctx context.Context, in *IncidentIdRequest, opts ...grpc.CallOption) (*Incident, error) {
	out := new(Incident)
	err := c.cc.Invoke(ctx, "/squzy.v1.incident.IncidentServer/StudyIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncidentServerServer is the server API for IncidentServer service.
type IncidentServerServer interface {
	CreateRule(context.Context, *CreateRuleRequest) (*Rule, error)
	GetRuleById(context.Context, *RuleIdRequest) (*Rule, error)
	GetRulesByOwnerId(context.Context, *GetRulesByOwnerIdRequest) (*Rules, error)
	RemoveRule(context.Context, *RuleIdRequest) (*Rule, error)
	ProcessRecordFromStorage(context.Context, *StorageRecord) (*empty.Empty, error)
	CloseIncident(context.Context, *IncidentIdRequest) (*Incident, error)
	StudyIncident(context.Context, *IncidentIdRequest) (*Incident, error)
}

// UnimplementedIncidentServerServer can be embedded to have forward compatible implementations.
type UnimplementedIncidentServerServer struct {
}

func (*UnimplementedIncidentServerServer) CreateRule(ctx context.Context, req *CreateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedIncidentServerServer) GetRuleById(ctx context.Context, req *RuleIdRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleById not implemented")
}
func (*UnimplementedIncidentServerServer) GetRulesByOwnerId(ctx context.Context, req *GetRulesByOwnerIdRequest) (*Rules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRulesByOwnerId not implemented")
}
func (*UnimplementedIncidentServerServer) RemoveRule(ctx context.Context, req *RuleIdRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRule not implemented")
}
func (*UnimplementedIncidentServerServer) ProcessRecordFromStorage(ctx context.Context, req *StorageRecord) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRecordFromStorage not implemented")
}
func (*UnimplementedIncidentServerServer) CloseIncident(ctx context.Context, req *IncidentIdRequest) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseIncident not implemented")
}
func (*UnimplementedIncidentServerServer) StudyIncident(ctx context.Context, req *IncidentIdRequest) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyIncident not implemented")
}

func RegisterIncidentServerServer(s *grpc.Server, srv IncidentServerServer) {
	s.RegisterService(&_IncidentServer_serviceDesc, srv)
}

func _IncidentServer_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentServer_GetRuleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).GetRuleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/GetRuleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).GetRuleById(ctx, req.(*RuleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentServer_GetRulesByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRulesByOwnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).GetRulesByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/GetRulesByOwnerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).GetRulesByOwnerId(ctx, req.(*GetRulesByOwnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentServer_RemoveRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).RemoveRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/RemoveRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).RemoveRule(ctx, req.(*RuleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentServer_ProcessRecordFromStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).ProcessRecordFromStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/ProcessRecordFromStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).ProcessRecordFromStorage(ctx, req.(*StorageRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentServer_CloseIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).CloseIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/CloseIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).CloseIncident(ctx, req.(*IncidentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentServer_StudyIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServerServer).StudyIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.incident.IncidentServer/StudyIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServerServer).StudyIncident(ctx, req.(*IncidentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IncidentServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.v1.incident.IncidentServer",
	HandlerType: (*IncidentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _IncidentServer_CreateRule_Handler,
		},
		{
			MethodName: "GetRuleById",
			Handler:    _IncidentServer_GetRuleById_Handler,
		},
		{
			MethodName: "GetRulesByOwnerId",
			Handler:    _IncidentServer_GetRulesByOwnerId_Handler,
		},
		{
			MethodName: "RemoveRule",
			Handler:    _IncidentServer_RemoveRule_Handler,
		},
		{
			MethodName: "ProcessRecordFromStorage",
			Handler:    _IncidentServer_ProcessRecordFromStorage_Handler,
		},
		{
			MethodName: "CloseIncident",
			Handler:    _IncidentServer_CloseIncident_Handler,
		},
		{
			MethodName: "StudyIncident",
			Handler:    _IncidentServer_StudyIncident_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/squzy_incident_server.proto",
}
