// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/squzy_notification_server.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NotificationMethodType int32

const (
	NotificationMethodType_NOTIFICATION_METHOD_UNSPECIFIED NotificationMethodType = 0
	NotificationMethodType_NOTIFICATION_METHOD_WEBHOOK     NotificationMethodType = 1
	NotificationMethodType_NOTIFICATION_METHOD_SLACK       NotificationMethodType = 2
)

var NotificationMethodType_name = map[int32]string{
	0: "NOTIFICATION_METHOD_UNSPECIFIED",
	1: "NOTIFICATION_METHOD_WEBHOOK",
	2: "NOTIFICATION_METHOD_SLACK",
}

var NotificationMethodType_value = map[string]int32{
	"NOTIFICATION_METHOD_UNSPECIFIED": 0,
	"NOTIFICATION_METHOD_WEBHOOK":     1,
	"NOTIFICATION_METHOD_SLACK":       2,
}

func (x NotificationMethodType) String() string {
	return proto.EnumName(NotificationMethodType_name, int32(x))
}

func (NotificationMethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{0}
}

type NotificationMethodStatus int32

const (
	NotificationMethodStatus_NOTIFICATION_STATUS_UNSPECIFIED NotificationMethodStatus = 0
	NotificationMethodStatus_NOTIFICATION_STATUS_ACTIVE      NotificationMethodStatus = 1
	NotificationMethodStatus_NOTIFICATION_STATUS_INACTIVE    NotificationMethodStatus = 2
	NotificationMethodStatus_NOTIFICATION_STATUS_REMOVED     NotificationMethodStatus = 3
)

var NotificationMethodStatus_name = map[int32]string{
	0: "NOTIFICATION_STATUS_UNSPECIFIED",
	1: "NOTIFICATION_STATUS_ACTIVE",
	2: "NOTIFICATION_STATUS_INACTIVE",
	3: "NOTIFICATION_STATUS_REMOVED",
}

var NotificationMethodStatus_value = map[string]int32{
	"NOTIFICATION_STATUS_UNSPECIFIED": 0,
	"NOTIFICATION_STATUS_ACTIVE":      1,
	"NOTIFICATION_STATUS_INACTIVE":    2,
	"NOTIFICATION_STATUS_REMOVED":     3,
}

func (x NotificationMethodStatus) String() string {
	return proto.EnumName(NotificationMethodStatus_name, int32(x))
}

func (NotificationMethodStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{1}
}

type WebHookMethod struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebHookMethod) Reset()         { *m = WebHookMethod{} }
func (m *WebHookMethod) String() string { return proto.CompactTextString(m) }
func (*WebHookMethod) ProtoMessage()    {}
func (*WebHookMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{0}
}

func (m *WebHookMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebHookMethod.Unmarshal(m, b)
}
func (m *WebHookMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebHookMethod.Marshal(b, m, deterministic)
}
func (m *WebHookMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebHookMethod.Merge(m, src)
}
func (m *WebHookMethod) XXX_Size() int {
	return xxx_messageInfo_WebHookMethod.Size(m)
}
func (m *WebHookMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_WebHookMethod.DiscardUnknown(m)
}

var xxx_messageInfo_WebHookMethod proto.InternalMessageInfo

func (m *WebHookMethod) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type SlackMethod struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlackMethod) Reset()         { *m = SlackMethod{} }
func (m *SlackMethod) String() string { return proto.CompactTextString(m) }
func (*SlackMethod) ProtoMessage()    {}
func (*SlackMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{1}
}

func (m *SlackMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlackMethod.Unmarshal(m, b)
}
func (m *SlackMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlackMethod.Marshal(b, m, deterministic)
}
func (m *SlackMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackMethod.Merge(m, src)
}
func (m *SlackMethod) XXX_Size() int {
	return xxx_messageInfo_SlackMethod.Size(m)
}
func (m *SlackMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackMethod.DiscardUnknown(m)
}

var xxx_messageInfo_SlackMethod proto.InternalMessageInfo

func (m *SlackMethod) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type NotificationMethodRequest struct {
	OwnerType            ComponentOwnerType `protobuf:"varint,1,opt,name=owner_type,json=ownerType,proto3,enum=squzy.v1.shared.ComponentOwnerType" json:"owner_type,omitempty"`
	OwnerId              string             `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	NotificationMethodId string             `protobuf:"bytes,3,opt,name=notification_method_id,json=notificationMethodId,proto3" json:"notification_method_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NotificationMethodRequest) Reset()         { *m = NotificationMethodRequest{} }
func (m *NotificationMethodRequest) String() string { return proto.CompactTextString(m) }
func (*NotificationMethodRequest) ProtoMessage()    {}
func (*NotificationMethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{2}
}

func (m *NotificationMethodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationMethodRequest.Unmarshal(m, b)
}
func (m *NotificationMethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationMethodRequest.Marshal(b, m, deterministic)
}
func (m *NotificationMethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationMethodRequest.Merge(m, src)
}
func (m *NotificationMethodRequest) XXX_Size() int {
	return xxx_messageInfo_NotificationMethodRequest.Size(m)
}
func (m *NotificationMethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationMethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationMethodRequest proto.InternalMessageInfo

func (m *NotificationMethodRequest) GetOwnerType() ComponentOwnerType {
	if m != nil {
		return m.OwnerType
	}
	return ComponentOwnerType_COMPONENT_OWNER_TYPE_UNSPECIFIED
}

func (m *NotificationMethodRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *NotificationMethodRequest) GetNotificationMethodId() string {
	if m != nil {
		return m.NotificationMethodId
	}
	return ""
}

type GetListRequest struct {
	OwnerType            ComponentOwnerType `protobuf:"varint,1,opt,name=owner_type,json=ownerType,proto3,enum=squzy.v1.shared.ComponentOwnerType" json:"owner_type,omitempty"`
	OwnerId              string             `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetListRequest) Reset()         { *m = GetListRequest{} }
func (m *GetListRequest) String() string { return proto.CompactTextString(m) }
func (*GetListRequest) ProtoMessage()    {}
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{3}
}

func (m *GetListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetListRequest.Unmarshal(m, b)
}
func (m *GetListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetListRequest.Marshal(b, m, deterministic)
}
func (m *GetListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListRequest.Merge(m, src)
}
func (m *GetListRequest) XXX_Size() int {
	return xxx_messageInfo_GetListRequest.Size(m)
}
func (m *GetListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetListRequest proto.InternalMessageInfo

func (m *GetListRequest) GetOwnerType() ComponentOwnerType {
	if m != nil {
		return m.OwnerType
	}
	return ComponentOwnerType_COMPONENT_OWNER_TYPE_UNSPECIFIED
}

func (m *GetListRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

type NotificationMethod struct {
	Id     string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status NotificationMethodStatus `protobuf:"varint,2,opt,name=status,proto3,enum=squzy.v1.notification.NotificationMethodStatus" json:"status,omitempty"`
	Type   NotificationMethodType   `protobuf:"varint,3,opt,name=type,proto3,enum=squzy.v1.notification.NotificationMethodType" json:"type,omitempty"`
	// Types that are valid to be assigned to Method:
	//	*NotificationMethod_Slack
	//	*NotificationMethod_Webhook
	Method               isNotificationMethod_Method `protobuf_oneof:"method"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NotificationMethod) Reset()         { *m = NotificationMethod{} }
func (m *NotificationMethod) String() string { return proto.CompactTextString(m) }
func (*NotificationMethod) ProtoMessage()    {}
func (*NotificationMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{4}
}

func (m *NotificationMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationMethod.Unmarshal(m, b)
}
func (m *NotificationMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationMethod.Marshal(b, m, deterministic)
}
func (m *NotificationMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationMethod.Merge(m, src)
}
func (m *NotificationMethod) XXX_Size() int {
	return xxx_messageInfo_NotificationMethod.Size(m)
}
func (m *NotificationMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationMethod.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationMethod proto.InternalMessageInfo

func (m *NotificationMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotificationMethod) GetStatus() NotificationMethodStatus {
	if m != nil {
		return m.Status
	}
	return NotificationMethodStatus_NOTIFICATION_STATUS_UNSPECIFIED
}

func (m *NotificationMethod) GetType() NotificationMethodType {
	if m != nil {
		return m.Type
	}
	return NotificationMethodType_NOTIFICATION_METHOD_UNSPECIFIED
}

type isNotificationMethod_Method interface {
	isNotificationMethod_Method()
}

type NotificationMethod_Slack struct {
	Slack *SlackMethod `protobuf:"bytes,4,opt,name=slack,proto3,oneof"`
}

type NotificationMethod_Webhook struct {
	Webhook *WebHookMethod `protobuf:"bytes,5,opt,name=webhook,proto3,oneof"`
}

func (*NotificationMethod_Slack) isNotificationMethod_Method() {}

func (*NotificationMethod_Webhook) isNotificationMethod_Method() {}

func (m *NotificationMethod) GetMethod() isNotificationMethod_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *NotificationMethod) GetSlack() *SlackMethod {
	if x, ok := m.GetMethod().(*NotificationMethod_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *NotificationMethod) GetWebhook() *WebHookMethod {
	if x, ok := m.GetMethod().(*NotificationMethod_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotificationMethod) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotificationMethod_Slack)(nil),
		(*NotificationMethod_Webhook)(nil),
	}
}

type NotificationMethodIdRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationMethodIdRequest) Reset()         { *m = NotificationMethodIdRequest{} }
func (m *NotificationMethodIdRequest) String() string { return proto.CompactTextString(m) }
func (*NotificationMethodIdRequest) ProtoMessage()    {}
func (*NotificationMethodIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{5}
}

func (m *NotificationMethodIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationMethodIdRequest.Unmarshal(m, b)
}
func (m *NotificationMethodIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationMethodIdRequest.Marshal(b, m, deterministic)
}
func (m *NotificationMethodIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationMethodIdRequest.Merge(m, src)
}
func (m *NotificationMethodIdRequest) XXX_Size() int {
	return xxx_messageInfo_NotificationMethodIdRequest.Size(m)
}
func (m *NotificationMethodIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationMethodIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationMethodIdRequest proto.InternalMessageInfo

func (m *NotificationMethodIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateNotificationMethodRequest struct {
	Type NotificationMethodType `protobuf:"varint,1,opt,name=type,proto3,enum=squzy.v1.notification.NotificationMethodType" json:"type,omitempty"`
	// Types that are valid to be assigned to Method:
	//	*CreateNotificationMethodRequest_Slack
	//	*CreateNotificationMethodRequest_Webhook
	Method               isCreateNotificationMethodRequest_Method `protobuf_oneof:"method"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CreateNotificationMethodRequest) Reset()         { *m = CreateNotificationMethodRequest{} }
func (m *CreateNotificationMethodRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNotificationMethodRequest) ProtoMessage()    {}
func (*CreateNotificationMethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{6}
}

func (m *CreateNotificationMethodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNotificationMethodRequest.Unmarshal(m, b)
}
func (m *CreateNotificationMethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNotificationMethodRequest.Marshal(b, m, deterministic)
}
func (m *CreateNotificationMethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationMethodRequest.Merge(m, src)
}
func (m *CreateNotificationMethodRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNotificationMethodRequest.Size(m)
}
func (m *CreateNotificationMethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationMethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationMethodRequest proto.InternalMessageInfo

func (m *CreateNotificationMethodRequest) GetType() NotificationMethodType {
	if m != nil {
		return m.Type
	}
	return NotificationMethodType_NOTIFICATION_METHOD_UNSPECIFIED
}

type isCreateNotificationMethodRequest_Method interface {
	isCreateNotificationMethodRequest_Method()
}

type CreateNotificationMethodRequest_Slack struct {
	Slack *SlackMethod `protobuf:"bytes,2,opt,name=slack,proto3,oneof"`
}

type CreateNotificationMethodRequest_Webhook struct {
	Webhook *WebHookMethod `protobuf:"bytes,3,opt,name=webhook,proto3,oneof"`
}

func (*CreateNotificationMethodRequest_Slack) isCreateNotificationMethodRequest_Method() {}

func (*CreateNotificationMethodRequest_Webhook) isCreateNotificationMethodRequest_Method() {}

func (m *CreateNotificationMethodRequest) GetMethod() isCreateNotificationMethodRequest_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *CreateNotificationMethodRequest) GetSlack() *SlackMethod {
	if x, ok := m.GetMethod().(*CreateNotificationMethodRequest_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *CreateNotificationMethodRequest) GetWebhook() *WebHookMethod {
	if x, ok := m.GetMethod().(*CreateNotificationMethodRequest_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateNotificationMethodRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateNotificationMethodRequest_Slack)(nil),
		(*CreateNotificationMethodRequest_Webhook)(nil),
	}
}

type GetListResponse struct {
	Methods              []*NotificationMethod `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetListResponse) Reset()         { *m = GetListResponse{} }
func (m *GetListResponse) String() string { return proto.CompactTextString(m) }
func (*GetListResponse) ProtoMessage()    {}
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3df2e4fd1243c80f, []int{7}
}

func (m *GetListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetListResponse.Unmarshal(m, b)
}
func (m *GetListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetListResponse.Marshal(b, m, deterministic)
}
func (m *GetListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListResponse.Merge(m, src)
}
func (m *GetListResponse) XXX_Size() int {
	return xxx_messageInfo_GetListResponse.Size(m)
}
func (m *GetListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetListResponse proto.InternalMessageInfo

func (m *GetListResponse) GetMethods() []*NotificationMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

func init() {
	proto.RegisterEnum("squzy.v1.notification.NotificationMethodType", NotificationMethodType_name, NotificationMethodType_value)
	proto.RegisterEnum("squzy.v1.notification.NotificationMethodStatus", NotificationMethodStatus_name, NotificationMethodStatus_value)
	proto.RegisterType((*WebHookMethod)(nil), "squzy.v1.notification.WebHookMethod")
	proto.RegisterType((*SlackMethod)(nil), "squzy.v1.notification.SlackMethod")
	proto.RegisterType((*NotificationMethodRequest)(nil), "squzy.v1.notification.NotificationMethodRequest")
	proto.RegisterType((*GetListRequest)(nil), "squzy.v1.notification.GetListRequest")
	proto.RegisterType((*NotificationMethod)(nil), "squzy.v1.notification.NotificationMethod")
	proto.RegisterType((*NotificationMethodIdRequest)(nil), "squzy.v1.notification.NotificationMethodIdRequest")
	proto.RegisterType((*CreateNotificationMethodRequest)(nil), "squzy.v1.notification.CreateNotificationMethodRequest")
	proto.RegisterType((*GetListResponse)(nil), "squzy.v1.notification.GetListResponse")
}

func init() {
	proto.RegisterFile("proto/v1/squzy_notification_server.proto", fileDescriptor_3df2e4fd1243c80f)
}

var fileDescriptor_3df2e4fd1243c80f = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xd1, 0x4f, 0xda, 0x5e,
	0x14, 0xb6, 0x54, 0x41, 0x8f, 0xf9, 0xf1, 0x23, 0x77, 0xd3, 0x54, 0xdc, 0x06, 0xab, 0xdb, 0xc2,
	0x4c, 0xc4, 0xc9, 0x96, 0x3d, 0xec, 0x69, 0xa5, 0x54, 0x69, 0x54, 0xba, 0x94, 0xaa, 0xcb, 0x5e,
	0x48, 0xb1, 0x67, 0xa3, 0x51, 0x7b, 0xb1, 0xbd, 0x60, 0x58, 0xe2, 0x3f, 0xb3, 0xbf, 0x60, 0x8f,
	0xfb, 0x93, 0xf6, 0xb0, 0x3f, 0x62, 0xe1, 0x16, 0x9c, 0x48, 0x1b, 0xd9, 0xdc, 0x78, 0xbb, 0xe4,
	0x7e, 0xdf, 0xf9, 0xce, 0xf9, 0xce, 0xc7, 0x05, 0x28, 0xb4, 0x7d, 0xca, 0xe8, 0x66, 0x77, 0x6b,
	0x33, 0x38, 0xef, 0x7c, 0xee, 0x35, 0x3c, 0xca, 0xdc, 0x8f, 0xee, 0xb1, 0xcd, 0x5c, 0xea, 0x35,
	0x02, 0xf4, 0xbb, 0xe8, 0x17, 0x39, 0x84, 0x2c, 0x71, 0x40, 0xb1, 0xbb, 0x55, 0xbc, 0x8e, 0xc9,
	0x2e, 0xfd, 0x2a, 0xd0, 0xb2, 0x7d, 0x74, 0x42, 0xb4, 0xfc, 0x18, 0xfe, 0x3b, 0xc2, 0x66, 0x95,
	0xd2, 0x93, 0x7d, 0x64, 0x2d, 0xea, 0x90, 0x0c, 0x88, 0x1d, 0xff, 0x54, 0x12, 0xf2, 0x42, 0x61,
	0xc1, 0xec, 0x1f, 0xe5, 0x1c, 0x2c, 0xd6, 0x4f, 0xed, 0xe3, 0x78, 0xc0, 0x57, 0x01, 0x56, 0x6a,
	0xd7, 0xb4, 0x42, 0xa0, 0x89, 0xe7, 0x1d, 0x0c, 0x18, 0x29, 0x03, 0xd0, 0x0b, 0x0f, 0xfd, 0x06,
	0xeb, 0xb5, 0x91, 0xd3, 0xd2, 0xa5, 0xb5, 0xe2, 0x55, 0x93, 0x83, 0x6e, 0x54, 0x7a, 0xd6, 0xa6,
	0x1e, 0x7a, 0xcc, 0xe8, 0x63, 0xad, 0x5e, 0x1b, 0xcd, 0x05, 0x3a, 0x3c, 0x92, 0x15, 0x98, 0x0f,
	0x6b, 0xb8, 0x8e, 0x94, 0xe0, 0xc2, 0x29, 0xfe, 0x59, 0x77, 0xc8, 0x2b, 0x58, 0x1e, 0xf1, 0xe2,
	0x8c, 0x8b, 0xf7, 0x81, 0x22, 0x07, 0xde, 0xf7, 0xc6, 0x3a, 0xd3, 0x1d, 0x99, 0x42, 0x7a, 0x07,
	0xd9, 0x9e, 0x1b, 0xb0, 0xe9, 0xb4, 0x29, 0x7f, 0x4b, 0x00, 0x19, 0xf7, 0x88, 0xa4, 0x21, 0xe1,
	0x3a, 0x03, 0x2f, 0x13, 0xae, 0x43, 0x76, 0x20, 0x19, 0x30, 0x9b, 0x75, 0x02, 0xce, 0x4f, 0x97,
	0x36, 0x8b, 0x91, 0xdb, 0x2c, 0x8e, 0x97, 0xaa, 0x73, 0x9a, 0x39, 0xa0, 0x13, 0x05, 0x66, 0xf9,
	0x20, 0x22, 0x2f, 0xb3, 0x31, 0x71, 0x19, 0x3e, 0x12, 0xa7, 0x92, 0x37, 0x30, 0x17, 0xf4, 0xf7,
	0x2e, 0xcd, 0xe6, 0x85, 0xc2, 0x62, 0x49, 0x8e, 0xa9, 0x71, 0x2d, 0x1b, 0xd5, 0x19, 0x33, 0xa4,
	0x90, 0xb7, 0x90, 0xba, 0xc0, 0x66, 0x8b, 0xd2, 0x13, 0x69, 0x8e, 0xb3, 0x9f, 0xc4, 0xb0, 0x47,
	0xc2, 0x57, 0x9d, 0x31, 0x87, 0xb4, 0xf2, 0x3c, 0x24, 0xc3, 0x55, 0xca, 0x1b, 0xb0, 0x5a, 0x8b,
	0xd8, 0xe1, 0x70, 0x71, 0x37, 0x2c, 0x94, 0x7f, 0x08, 0x90, 0x53, 0x7d, 0xb4, 0x19, 0xc6, 0x67,
	0x72, 0xe8, 0x8e, 0xf0, 0x17, 0xdc, 0x49, 0xdc, 0xc9, 0x1d, 0xf1, 0xae, 0xee, 0x1c, 0xc2, 0xff,
	0x57, 0x49, 0x0e, 0xda, 0xd4, 0x0b, 0x90, 0xa8, 0x90, 0x0a, 0x2f, 0x03, 0x49, 0xc8, 0x8b, 0x85,
	0xc5, 0xd2, 0xf3, 0x89, 0x07, 0x34, 0x87, 0xcc, 0xf5, 0x4b, 0x58, 0x8e, 0x9e, 0x9f, 0xac, 0x41,
	0xae, 0x66, 0x58, 0xfa, 0xb6, 0xae, 0x2a, 0x96, 0x6e, 0xd4, 0x1a, 0xfb, 0x9a, 0x55, 0x35, 0x2a,
	0x8d, 0x83, 0x5a, 0xfd, 0x9d, 0xa6, 0xea, 0xdb, 0xba, 0x56, 0xc9, 0xcc, 0x90, 0x1c, 0xac, 0x46,
	0x81, 0x8e, 0xb4, 0x72, 0xd5, 0x30, 0x76, 0x33, 0x02, 0x79, 0x08, 0x2b, 0x51, 0x80, 0xfa, 0x9e,
	0xa2, 0xee, 0x66, 0x12, 0xeb, 0x5f, 0x04, 0x90, 0xe2, 0x42, 0x3e, 0xd6, 0x41, 0xdd, 0x52, 0xac,
	0x83, 0xfa, 0x8d, 0x0e, 0x1e, 0x41, 0x36, 0x0a, 0xa4, 0xa8, 0x96, 0x7e, 0xa8, 0x65, 0x04, 0x92,
	0x87, 0x07, 0x51, 0xf7, 0x7a, 0x6d, 0x80, 0x48, 0x8c, 0xcd, 0x30, 0x40, 0x98, 0xda, 0xbe, 0x71,
	0xa8, 0x55, 0x32, 0x62, 0xe9, 0x7b, 0x12, 0xee, 0x8d, 0x34, 0x69, 0x7b, 0xf6, 0x27, 0xf4, 0xc9,
	0x25, 0x48, 0x71, 0x09, 0x24, 0xaf, 0x63, 0x76, 0x71, 0x4b, 0x64, 0xb3, 0x93, 0xef, 0x90, 0xb4,
	0x20, 0xb5, 0x83, 0xac, 0xdc, 0xd3, 0x1d, 0x52, 0x9a, 0x98, 0xa5, 0xff, 0x89, 0xd2, 0x09, 0x40,
	0x05, 0x4f, 0x91, 0xe1, 0x34, 0xc4, 0x5c, 0x98, 0x57, 0x8e, 0x99, 0xdb, 0xb5, 0x19, 0x4e, 0x65,
	0x2e, 0x7b, 0x4a, 0x62, 0x4d, 0x10, 0x15, 0xc7, 0x21, 0x2f, 0x26, 0xff, 0x92, 0xfe, 0xbe, 0x06,
	0x42, 0xd2, 0xc4, 0x33, 0xda, 0xc5, 0x7f, 0x2b, 0xf3, 0x9e, 0x27, 0xaf, 0xff, 0x18, 0x91, 0xa7,
	0x31, 0xac, 0xd1, 0x9f, 0xdd, 0xec, 0xb3, 0xdb, 0x60, 0xe1, 0x9b, 0x56, 0x9e, 0xfb, 0x20, 0xda,
	0x6d, 0xb7, 0x99, 0xe4, 0xff, 0x5a, 0x5e, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xae, 0xb3,
	0x5d, 0x0f, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationManagerClient is the client API for NotificationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationManagerClient interface {
	// protolint:disable:next MAX_LINE_LENGTH
	CreateNotificationMethod(ctx context.Context, in *CreateNotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	GetById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	DeleteById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Activate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Deactivate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Add(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	Remove(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
}

type notificationManagerClient struct {
	cc *grpc.ClientConn
}

func NewNotificationManagerClient(cc *grpc.ClientConn) NotificationManagerClient {
	return &notificationManagerClient{cc}
}

func (c *notificationManagerClient) CreateNotificationMethod(ctx context.Context, in *CreateNotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/CreateNotificationMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) DeleteById(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Activate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Deactivate(ctx context.Context, in *NotificationMethodIdRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Add(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) Remove(ctx context.Context, in *NotificationMethodRequest, opts ...grpc.CallOption) (*NotificationMethod, error) {
	out := new(NotificationMethod)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/squzy.v1.notification.NotificationManager/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationManagerServer is the server API for NotificationManager service.
type NotificationManagerServer interface {
	// protolint:disable:next MAX_LINE_LENGTH
	CreateNotificationMethod(context.Context, *CreateNotificationMethodRequest) (*NotificationMethod, error)
	GetById(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	DeleteById(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	Activate(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	Deactivate(context.Context, *NotificationMethodIdRequest) (*NotificationMethod, error)
	Add(context.Context, *NotificationMethodRequest) (*NotificationMethod, error)
	Remove(context.Context, *NotificationMethodRequest) (*NotificationMethod, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
}

// UnimplementedNotificationManagerServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationManagerServer struct {
}

func (*UnimplementedNotificationManagerServer) CreateNotificationMethod(ctx context.Context, req *CreateNotificationMethodRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationMethod not implemented")
}
func (*UnimplementedNotificationManagerServer) GetById(ctx context.Context, req *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedNotificationManagerServer) DeleteById(ctx context.Context, req *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (*UnimplementedNotificationManagerServer) Activate(ctx context.Context, req *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedNotificationManagerServer) Deactivate(ctx context.Context, req *NotificationMethodIdRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (*UnimplementedNotificationManagerServer) Add(ctx context.Context, req *NotificationMethodRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedNotificationManagerServer) Remove(ctx context.Context, req *NotificationMethodRequest) (*NotificationMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedNotificationManagerServer) GetList(ctx context.Context, req *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}

func RegisterNotificationManagerServer(s *grpc.Server, srv NotificationManagerServer) {
	s.RegisterService(&_NotificationManager_serviceDesc, srv)
}

func _NotificationManager_CreateNotificationMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).CreateNotificationMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/CreateNotificationMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).CreateNotificationMethod(ctx, req.(*CreateNotificationMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetById(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).DeleteById(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Activate(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Deactivate(ctx, req.(*NotificationMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Add(ctx, req.(*NotificationMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).Remove(ctx, req.(*NotificationMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squzy.v1.notification.NotificationManager/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squzy.v1.notification.NotificationManager",
	HandlerType: (*NotificationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotificationMethod",
			Handler:    _NotificationManager_CreateNotificationMethod_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _NotificationManager_GetById_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _NotificationManager_DeleteById_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _NotificationManager_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _NotificationManager_Deactivate_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _NotificationManager_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _NotificationManager_Remove_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _NotificationManager_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/squzy_notification_server.proto",
}
